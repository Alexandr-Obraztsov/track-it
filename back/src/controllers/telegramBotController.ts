import TelegramBot from 'node-telegram-bot-api'
import { GeminiService } from '../services/geminiService'
import { TaskService } from '../services/taskService'
import { ChatService } from '../services/chatService'
import { RoleService } from '../services/roleService'
import { CommandHandlerService } from '../services/commandHandlerService'
import { CallbackHandlerService } from '../services/callbackHandlerService'
import { UserService } from '../services/userService'
import { UserFormatter, MessageFormatter } from '../services/formatter'
import { BotMentionUtils } from '../utils/botMentionUtils'
import { ContextService } from '../services/contextService'
import { MessageProcessor } from '../services/messageProcessor'

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
class TelegramBotController {
	private bot?: TelegramBot
	private token: string
	private taskService: TaskService
	private chatService: ChatService
	private roleService: RoleService
	private commandHandler: CommandHandlerService
	private callbackHandler: CallbackHandlerService
	private messageProcessor: MessageProcessor
	private geminiService: GeminiService
	private userService: UserService

	constructor(
		taskService: TaskService,
		chatService: ChatService,
		roleService: RoleService,
		geminiService: GeminiService,
		userService: UserService
	) {
		this.taskService = taskService
		this.chatService = chatService
		this.roleService = roleService
		this.geminiService = geminiService
		this.userService = userService

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
		const contextService = new ContextService(taskService, chatService, roleService, userService)
		this.messageProcessor = new MessageProcessor(contextService, geminiService, taskService)
		this.commandHandler = new CommandHandlerService(taskService, chatService, roleService, userService)
		this.callbackHandler = new CallbackHandlerService(taskService, chatService, roleService, userService)

		this.token = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN'
		if (this.token === 'YOUR_BOT_TOKEN') {
			console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
			return
		}

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
		const botOptions: any = {
			polling: true,
			request: {
				timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
			},
		}

		this.bot = new TelegramBot(this.token, botOptions)
		this.initializeHandlers()
		this.initializeErrorHandling()
		console.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
	}

	private initializeHandlers(): void {
		if (!this.bot) return

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
		this.bot.on('callback_query', async callbackQuery => {
			try {
				await this.callbackHandler.handleCallbackQuery(this.bot!, callbackQuery)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ callback query:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async msg => {
			try {
				await this.commandHandler.handleStart(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check
		this.bot.onText(/\/check/, async msg => {
			try {
				await this.handleCheckCommand(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tasks
		this.bot.onText(/\/tasks/, async msg => {
			try {
				await this.commandHandler.handleTasks(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tasks:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /members
		this.bot.onText(/\/members/, async msg => {
			try {
				await this.commandHandler.handleMembers(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /members:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /roles
		this.bot.onText(/\/roles/, async msg => {
			try {
				await this.commandHandler.handleRoles(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /roles:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mytasks
		this.bot.onText(/\/mytasks/, async msg => {
			try {
				await this.commandHandler.handleMyTasks(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /mytasks:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		this.bot.on('voice', async msg => {
			try {
				const isMentioned = await BotMentionUtils.isBotMentioned(this.bot!, msg)
				if (!isMentioned) return

				await this.messageProcessor.handleMessage(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
		this.bot.on('message', async msg => {
			try {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
				if (msg.text?.startsWith('/') || msg.voice || !msg.text) return
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
				const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
				if (isGroup) {
					const isMentioned = await BotMentionUtils.isBotMentioned(this.bot!, msg)
					if (!isMentioned) return
				}

				await this.messageProcessor.handleMessage(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
		this.bot.on('new_chat_members', async msg => {
			try {
				await this.handleNewChatMembers(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
		this.bot.on('my_chat_member', async msg => {
			try {
				await this.handleMyChatMember(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		this.bot.on('message', async msg => {
			try {
				await this.handleMessage(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})
	}

	private initializeErrorHandling(): void {
		if (!this.bot) return

		this.bot.on('polling_error', error => {
			console.error('Polling error:', error)
		})

		this.bot.on('error', error => {
			console.error('Bot error:', error)
		})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
	private async handleNewChatMembers(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const user = msg.from
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup || !user) return

		try {
			// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
			await this.chatService.createOrGetChat({
				telegramId: chatId,
				title: msg.chat.title || 'Unknown Group',
				username: msg.chat.username,
			})

			if (user.is_bot) return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤

			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			const member = await this.userService.createOrGetUser({
				telegramId: user.id.toString(),
				username: user.username!,
				firstName: user.first_name,
				lastName: user.last_name,
			})

			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			await this.chatService.addMember(chatId, member.telegramId.toString())

			const personalWelcome = MessageFormatter.BOT_MESSAGES.WELCOME(member)

			bot.sendMessage(chatId, personalWelcome)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	private async handleMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chat = msg.chat
		const user = msg.from
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
		const messageText = msg.text || msg.caption || MessageFormatter.BOT_MESSAGES.SYSTEM_MESSAGE

		try {
			const isMentioned = await BotMentionUtils.isBotMentioned(this.bot!, msg)
			// –ï—Å–ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if (isMentioned && msg.reply_to_message && msg.reply_to_message.voice)
				await this.messageProcessor.handleMessage(this.bot!, msg.reply_to_message)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
		if (!isGroup && user && !user.is_bot && msg.text) {
			const buttonTexts = ['üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏']
			if (buttonTexts.includes(msg.text)) {
				try {
					await this.commandHandler.handleKeyboardButton(this.bot!, msg)
					return // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error)
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
		if (user && !user.is_bot && msg.text && !msg.text.startsWith('/')) {
			const isMentioned = await BotMentionUtils.isBotMentioned(this.bot!, msg)
			if (isMentioned || !isGroup) {
				try {
					await this.messageProcessor.handleMessage(this.bot!, msg)
					return // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
				}
			}
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
		if (isGroup && user && !user.is_bot) {
			console.log(`Received message: ${messageText} from ${user?.username!}`)
			try {
				// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
				await this.chatService.createOrGetChat({
					telegramId: chat.id.toString(),
					title: chat.title || 'Unknown Group',
					username: chat.username,
				})

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
				const isRegistered = await this.chatService.isMember(chat.id.toString(), user.id.toString())

				if (!isRegistered) {
					const member = await this.userService.createOrGetUser({
						telegramId: user.id.toString(),
						username: user.username!,
						firstName: user.first_name || '',
						lastName: user.last_name || '',
					})

					// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await this.chatService.addMember(chat.id.toString(), user.id.toString())

					const userTag = UserFormatter.createTag(member)
					const welcomeText = MessageFormatter.BOT_MESSAGES.WELCOME(member)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ—É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
					const sentMessage = await bot.sendMessage(chat.id.toString(), welcomeText)

					setTimeout(async () => {
						try {
							await bot.deleteMessage(chat.id.toString(), sentMessage.message_id)
						} catch (deleteError) {
							console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', deleteError)
						}
					}, 5000)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
			}
		}
	}

	private async handleCheckCommand(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		if (msg.reply_to_message && (msg.reply_to_message.voice || msg.reply_to_message.text)) {
			await this.messageProcessor.handleMessage(this.bot!, msg.reply_to_message)
		} else {
			this.bot!.sendMessage(msg.chat.id, '‚ùì –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /check', {
				reply_to_message_id: msg.message_id,
			})
		}
	}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
	private async handleMyChatMember(bot: TelegramBot, msg: TelegramBot.ChatMemberUpdated): Promise<void> {
		const chat = msg.chat
		const isGroup = chat.type === 'group' || chat.type === 'supergroup'
		const newStatus = msg.new_chat_member?.status
		const oldStatus = msg.old_chat_member?.status

		if (!isGroup) return

		try {
			// –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É (—Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)
			if (newStatus === 'member' && (oldStatus === 'left' || oldStatus === 'kicked' || !oldStatus)) {
				await this.handleBotAddedToGroup(bot, msg, false)
			}
			// –ï—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			else if (newStatus === 'administrator' && oldStatus === 'member') {
				await this.handleBotBecameAdmin(bot, msg)
			}
			// –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ä–∞–∑—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
			else if (newStatus === 'administrator' && (oldStatus === 'left' || oldStatus === 'kicked' || !oldStatus)) {
				await this.handleBotAddedToGroup(bot, msg, true)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
	private async handleBotAddedToGroup(
		bot: TelegramBot,
		msg: TelegramBot.ChatMemberUpdated,
		isAdmin: boolean
	): Promise<void> {
		const chat = msg.chat

		// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
		await this.chatService.createOrGetChat({
			telegramId: chat.id.toString(),
			title: chat.title || 'Unknown Group',
			username: chat.username || '',
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		const welcomeMessage =
			MessageFormatter.BOT_MESSAGES.WELCOME + '\n\n' +
			MessageFormatter.BOT_MESSAGES.VOICE_INSTRUCTIONS + '\n\n' +
			MessageFormatter.BOT_MESSAGES.NATURAL_SPEECH + '\n\n' +
			(isAdmin
				? MessageFormatter.BOT_MESSAGES.ADMIN_OK
				: MessageFormatter.BOT_MESSAGES.ADMIN_NEED)

		// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
		const keyboard = {
			inline_keyboard: [
				[
					{
						text: MessageFormatter.BOT_MESSAGES.REGISTER_BUTTON,
						callback_data: 'register',
					},
				],
				[
					{ text: 'üìã –ó–∞–¥–∞—á–∏', callback_data: 'show_tasks' },
					{ text: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data: 'show_members' },
					{ text: 'üé≠ –†–æ–ª–∏', callback_data: 'show_roles' }
				]
			],
		}

		const sentMessage = await bot.sendMessage(chat.id.toString(), welcomeMessage, {
			reply_markup: keyboard,
		})

		if (isAdmin) {
			// –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω, —Å—Ä–∞–∑—É –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			try {
				await bot.pinChatMessage(chat.id.toString(), sentMessage.message_id)
				await this.chatService.updateWelcomeMessage(chat.id.toString(), sentMessage.message_id)
				bot.sendMessage(chat.id.toString(), MessageFormatter.BOT_MESSAGES.PINNED)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
			await this.chatService.updateWelcomeMessage(chat.id.toString(), sentMessage.message_id)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	private async handleBotBecameAdmin(bot: TelegramBot, msg: TelegramBot.ChatMemberUpdated): Promise<void> {
		const chatId = msg.chat.id.toString()

		try {
			// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			const welcomeMessageId = await this.chatService.getWelcomeMessageId(chatId)

			if (welcomeMessageId) {
				// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				await bot.pinChatMessage(chatId, welcomeMessageId)
				bot.sendMessage(
					chatId,
					MessageFormatter.BOT_MESSAGES.ADMIN_WELCOME_PINNED
				)
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
				bot.sendMessage(
					chatId,
					MessageFormatter.BOT_MESSAGES.ADMIN_THANKS + ' ' + MessageFormatter.BOT_MESSAGES.ADMIN_FULL
				)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
			bot.sendMessage(chatId, MessageFormatter.BOT_MESSAGES.ADMIN_THANKS)
		}
	}

	public sendMessage(chatId: string | number, text: string): void {
		if (!this.bot) {
			console.error('Bot is not initialized')
			return
		}
		this.bot.sendMessage(chatId, text)
	}

	public getBot(): TelegramBot | undefined {
		return this.bot
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
export { TelegramBotController }
