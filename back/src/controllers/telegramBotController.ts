import TelegramBot from 'node-telegram-bot-api'
import * as fs from 'fs'
import * as path from 'path'
import ffmpeg from 'fluent-ffmpeg'
import { GeminiService, GroupMember } from '../services/geminiService'
import { TaskService } from '../services/taskService'
import { ChatService } from '../services/chatService'
import { RoleService } from '../services/roleService'
import { dataSource } from '../server'

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
class TelegramBotController {
	private bot?: TelegramBot
	private token: string
	private geminiService?: GeminiService
	private taskService: TaskService
	private chatService: ChatService
	private roleService: RoleService

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
	private translatePriority(priority: 'high' | 'medium' | 'low'): string {
		switch (priority) {
			case 'high': return '–≤—ã—Å–æ–∫–∏–π'
			case 'medium': return '—Å—Ä–µ–¥–Ω–∏–π'
			case 'low': return '–Ω–∏–∑–∫–∏–π'
			default: return priority
		}
	}

	constructor(taskService: TaskService, chatService: ChatService) {
		this.taskService = taskService
		this.chatService = chatService
		this.roleService = new RoleService(dataSource)
		this.token = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN'
		if (this.token === 'YOUR_BOT_TOKEN') {
			console.error(
				'–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
			)
			return
		}

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
		const botOptions: any = {
			polling: true,
			request: {
				timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
			},
		}

		const geminiApiKey = process.env.GEMINI_API_KEY || ''
		if (geminiApiKey) {
			this.geminiService = new GeminiService(geminiApiKey)
		}
		this.bot = new TelegramBot(this.token, botOptions)
		this.initializeHandlers()
		this.initializeErrorHandling()
		this.ensureDownloadsDirectory()
		console.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	private ensureDownloadsDirectory(): void {
		const downloadsDir = path.join(__dirname, '../downloads')
		if (!fs.existsSync(downloadsDir)) {
			fs.mkdirSync(downloadsDir, { recursive: true })
		}
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3
	private async convertOggToMp3(
		inputPath: string,
		outputPath: string
	): Promise<void> {
		return new Promise((resolve, reject) => {
			ffmpeg(inputPath)
				.toFormat('mp3')
				.on('end', () => resolve())
				.on('error', (err: any) => reject(err))
				.save(outputPath)
		})
	}

	private initializeHandlers(): void {
		if (!this.bot) return
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
		this.bot.on('my_chat_member', async update => {
			const chatId = update.chat.id.toString()
			const newStatus = update.new_chat_member.status
			const oldStatus = update.old_chat_member.status
			
			console.log(`Bot status changed in chat ${chatId}: ${oldStatus} -> ${newStatus}`)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			if (newStatus === 'administrator' && oldStatus !== 'administrator') {
				try {
					// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
					const warningMessageId = await this.chatService.getWarningMessageId(chatId)
					
					// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
					if (warningMessageId) {
						try {
							await this.bot!.deleteMessage(chatId, warningMessageId)
							console.log('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∞–≤–∞—Ö —É–¥–∞–ª–µ–Ω–æ')
							// –û—á–∏—â–∞–µ–º ID –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ë–î
							await this.chatService.updateWarningMessageId(chatId, 0)
						} catch (deleteError) {
							console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', deleteError)
						}
					}
					
					// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
					const welcomeMessageId = await this.chatService.getWelcomeMessageId(chatId)
					
					// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å
					if (welcomeMessageId) {
						try {
							await this.bot!.pinChatMessage(chatId, welcomeMessageId)
							console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
							
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏
							await this.bot!.sendMessage(chatId, '‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.')
						} catch (pinError) {
							console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', pinError)
						}
					}
					
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
				}
			}
		})
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
		this.bot.on('new_chat_members', async msg => {
			const chatId = msg.chat.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
			
			if (!isGroup) return
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞—à –±–æ—Ç
			const botAdded = msg.new_chat_members?.some(member => member.is_bot)
			
			if (botAdded) {
				try {
					// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
					const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					const welcomeMessage = `üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö!\n\n` +
						`–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n` +
						`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`
					
					const registerKeyboard = {
						inline_keyboard: [
							[{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }]
						]
					}
					
					const sentMessage = await this.bot!.sendMessage(chatId, welcomeMessage, {
						reply_markup: registerKeyboard
					})
					
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
					await this.chatService.updateWelcomeMessageId(chatId, sentMessage.message_id)
					
					// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
					try {
						await this.bot!.pinChatMessage(chatId, sentMessage.message_id)
						console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ')
					} catch (pinError) {
						console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞):', pinError)
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
						const instructionMessage = `üí° *–í–∞–∂–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã:*\n` +
							`–ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é "–ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".\n\n` +
							`–ü–æ–∫–∞ —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É \`/register\` –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.`
						
						try {
							const warningMessage = await this.bot!.sendMessage(chatId, instructionMessage, { parse_mode: 'Markdown' })
							// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
							await this.chatService.updateWarningMessageId(chatId, warningMessage.message_id)
						} catch (instructionError) {
							console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:', instructionError)
						}
					}
					
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:', error)
				}
			}
		})
		this.bot.on('callback_query', async query => {
			if (query.data === 'register') {
				const chatId = query.message?.chat.id?.toString()
				const userId = query.from.id.toString()
				const username = query.from.username || 'unknown'
				const firstName = query.from.first_name
				const lastName = query.from.last_name
				
				if (!chatId) return
				
				try {
					// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
					const chat = await this.chatService.getOrCreateChat(chatId, query.message?.chat.title || 'Unknown Group', query.message?.chat.username)
					
					// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
					const member = await this.chatService.registerMember(chatId, userId, username, firstName, lastName)
					
					// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
					await this.bot!.answerCallbackQuery(query.id, {
						text: '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!',
						show_alert: true
					})
					
					// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const successMessage = `‚úÖ ${firstName || username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /add\n‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /tasks\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á`
					
					await this.bot!.sendMessage(chatId, successMessage, { reply_to_message_id: query.message?.message_id })
					
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error)
					await this.bot!.answerCallbackQuery(query.id, {
						text: '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
						show_alert: true
					})
				}
			}
		})
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, msg => {
			const chatId = msg.chat.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
			
			if (isGroup) {
				this.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ\n/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã\n/members - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/pin_welcome - –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n/add [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø—É\n/assign [id] @[username] - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n/complete [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á')
			} else {
				this.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á–∏, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n/add [–∑–∞–¥–∞—á–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n/delete [id] - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
		this.bot.onText(/\/help/, msg => {
			const chatId = msg.chat.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
			
			if (isGroup) {
				this.sendMessage(
					chatId,
					'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å\n/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ\n/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã\n/members - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/pin_welcome - –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n/add [–∑–∞–¥–∞—á–∞] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø—É\n/assign [id] @[username] - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n/complete [id] - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n/delete [id] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n/roles - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ\n/role_assign @[username] [role] - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/role_remove @[username] - –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á'
				)
			} else {
				this.sendMessage(
					chatId,
					'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å\n/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n/add [–∑–∞–¥–∞—á–∞] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n/delete [id] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –∞—É–¥–∏–æ'
				)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /members
		this.bot.onText(/\/members/, async msg => {
			const chatId = msg.chat.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ /members –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
				return
			}

			try {
				// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
				const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
				const members = await this.chatService.getChatMembers(chatId)
				
				if (members.length === 0) {
					this.sendMessage(chatId, '–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
				} else {
					let response = `üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (${members.length}):\n\n`
					
					// –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
					for (let i = 0; i < members.length; i++) {
						const member = members[i]
						const memberWithRole = await this.chatService.getMemberWithRole(chatId, member.userId)
						
						const name = member.firstName || member.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
						response += `${i + 1}. ${name}`
						
						if (member.username) {
							response += ` (@${member.username})`
						}
						
						// –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
						if (memberWithRole?.role) {
							const roleEmoji = memberWithRole.role.name === 'admin' ? 'üëë' : 
											 memberWithRole.role.name === 'moderator' ? 'üõ°Ô∏è' : 'üé≠'
							response += ` ${roleEmoji} [${memberWithRole.role.name}]`
						}
						
						response += `\n`
					}
					
					this.sendMessage(chatId, response)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pin_welcome
		this.bot.onText(/\/pin_welcome/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ /pin_welcome –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
				return
			}

			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
				const chatMember = await this.bot!.getChatMember(chatId, userId)
				const isAdmin = ['administrator', 'creator'].includes(chatMember.status)

				if (!isAdmin) {
					this.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
					return
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				const welcomeMessage = `üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö!\n\n` +
					`–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n` +
					`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`

				const registerKeyboard = {
					inline_keyboard: [
						[{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }]
					]
				}

				const sentMessage = await this.bot!.sendMessage(chatId, welcomeMessage, {
					reply_markup: registerKeyboard
				})

				// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				await this.bot!.pinChatMessage(chatId, sentMessage.message_id)
				this.sendMessage(chatId, '‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')

			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
				this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tasks
		this.bot.onText(/\/tasks/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			try {
				let tasks
				if (isGroup) {
					// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ ID
					const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
					tasks = await this.taskService.getTasksByChat(chatId)
				} else {
					tasks = await this.taskService.getPersonalTasks(userId)
				}

				if (tasks.length === 0) {
					this.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á')
				} else {
					let response = isGroup ? '–ó–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã:\n' : '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n'
					tasks.forEach((task, index) => {
						response += `\n${index + 1}. ${task.title}\n`
						response += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`
						response += `   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(task.priority)}\n`
						if (task.deadline) {
							response += `   –°—Ä–æ–∫: ${task.deadline}\n`
						}
						if (isGroup && task.assignedToUserId) {
							response += `   –ù–∞–∑–Ω–∞—á–µ–Ω–∞: @${task.assignedToUserId}\n`
						}
						response += `   ID: ${task.id}\n`
					})
					this.sendMessage(chatId, response)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
		this.bot.onText(/\/add (.+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const taskText = msg.text!.replace('/add ', '')
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			try {
				if (isGroup) {
					// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ ID
					const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
					await this.taskService.createGroupTask({
						title: taskText,
						description: taskText,
						priority: 'medium',
						deadline: null,
						userId,
						chatId: chatId
					})
				} else {
					await this.taskService.createPersonalTask({
						title: taskText,
						description: taskText,
						priority: 'medium',
						deadline: null,
						userId
					})
				}
				this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ "${taskText}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete
		this.bot.onText(/\/delete (\d+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const taskId = parseInt(msg.text!.replace('/delete ', ''))
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			try {
				let deleted
				if (isGroup) {
					// –í –≥—Ä—É–ø–ø–∞—Ö —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥—Ä—É–ø–ø–æ–≤—É—é –∑–∞–¥–∞—á—É)
					deleted = await this.taskService.deleteGroupTask(taskId)
				} else {
					// –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					deleted = await this.taskService.deleteTask(taskId, userId)
				}

				if (deleted) {
					this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${taskId} —É–¥–∞–ª–µ–Ω–∞`)
				} else {
					this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /assign
		this.bot.onText(/\/assign (\d+) @?(\w+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const taskId = parseInt(msg.text!.replace(/\/assign \d+ @?\w+/, '$1'))
			const assigneeUsername = msg.text!.replace(/\/assign \d+ @?/, '')
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ /assign –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
				return
			}

			try {
				// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
				const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
				
				// –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
				const members = await this.chatService.getChatMembers(chatId)
				const assignee = members.find((m: any) => m.username === assigneeUsername)

				if (!assignee) {
					this.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${assigneeUsername} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ`)
					return
				}

				// –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É
				const updatedTask = await this.taskService.updateGroupTask(taskId, { assignedToUserId: assignee.userId })

				if (updatedTask) {
					this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${taskId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${assigneeUsername}`)
				} else {
					this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏')
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /complete
		this.bot.onText(/\/complete (\d+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const taskId = parseInt(msg.text!.replace('/complete ', ''))
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			try {
				let updatedTask
				if (isGroup) {
					// –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					const task = await this.taskService.getGroupTaskById(taskId)
					if (task && task.assignedToUserId === userId) {
						updatedTask = await this.taskService.updateGroupTask(taskId, { isCompleted: true })
					} else {
						this.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º')
						return
					}
				} else {
					updatedTask = await this.taskService.updateTask(taskId, userId, { isCompleted: true })
				}

				if (updatedTask) {
					this.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è`)
				} else {
					this.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π')
			}
		})

		// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		this.bot.onText(/\/role_assign @?(\w+) (\w+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
				return
			}

			try {
				const matches = msg.text!.match(/\/role_assign @?(\w+) (\w+)/)
				if (!matches) return

				const targetUsername = matches[1]
				const roleName = matches[2]

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const currentMember = await this.chatService.getMemberWithRole(chatId, userId)
				if (!currentMember?.role || (currentMember.role.name !== 'admin' && currentMember.role.name !== 'moderator')) {
					this.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π')
					return
				}

				// –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const members = await this.chatService.getChatMembers(chatId)
				const targetMember = members.find(member => member.username === targetUsername)
				
				if (!targetMember) {
					this.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ`)
					return
				}

				// –ò—â–µ–º —Ä–æ–ª—å
				const role = await this.roleService.getRoleByName(chatId, roleName)
				if (!role) {
					this.sendMessage(chatId, `–†–æ–ª—å "${roleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
					return
				}

				// –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
				const success = await this.chatService.assignRoleToUser(chatId, targetMember.userId, role.id)
				if (success) {
					this.sendMessage(chatId, `‚úÖ –†–æ–ª—å "${roleName}" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${targetUsername}`)
				} else {
					this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏`)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏')
			}
		})

		// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		this.bot.onText(/\/role_remove @?(\w+)/, async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
				return
			}

			try {
				const matches = msg.text!.match(/\/role_remove @?(\w+)/)
				if (!matches) return

				const targetUsername = matches[1]

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const currentMember = await this.chatService.getMemberWithRole(chatId, userId)
				if (!currentMember?.role || (currentMember.role.name !== 'admin' && currentMember.role.name !== 'moderator')) {
					this.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏')
					return
				}

				// –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const members = await this.chatService.getChatMembers(chatId)
				const targetMember = members.find(member => member.username === targetUsername)
				
				if (!targetMember) {
					this.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ`)
					return
				}

				// –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
				const success = await this.chatService.removeRoleFromUser(chatId, targetMember.userId)
				if (success) {
					this.sendMessage(chatId, `‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${targetUsername}`)
				} else {
					this.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏`)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏')
			}
		})

		// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
		this.bot.onText(/\/roles/, async msg => {
			const chatId = msg.chat.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

			if (!isGroup) {
				this.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
				return
			}

			try {
				const roles = await this.roleService.getChatRoles(chatId)
				
				if (roles.length === 0) {
					this.sendMessage(chatId, '–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π')
					return
				}

				let response = 'üé≠ –†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ:\n\n'
				for (const role of roles) {
					response += `‚Ä¢ ${role.name}\n`
				}

				this.sendMessage(chatId, response)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', error)
				this.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π')
			}
		})

		// Handle voice messages
		this.bot.on('voice', async msg => {
			const chatId = msg.chat.id.toString()
			const userId = msg.from!.id.toString()
			const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
			const fileId = msg.voice!.file_id
			const oggFileName = `voice_${Date.now()}.ogg`
			const mp3FileName = `voice_${Date.now()}.mp3`
			const downloadsDir = path.join(__dirname, '../downloads')
			const oggPath = path.join(downloadsDir, oggFileName)
			const mp3Path = path.join(downloadsDir, mp3FileName)

			try {
				console.log(`Processing voice message with fileId: ${fileId}`)

				// Get file info first
				const fileInfo = await this.bot!.getFile(fileId)
				console.log(`File info:`, fileInfo)

				// Download file
				const downloadResult = await this.bot!.downloadFile(
					fileId,
					downloadsDir
				)
				console.log(`Download result type:`, typeof downloadResult)

				let downloadedFilePath: string

				if (typeof downloadResult === 'string') {
					// downloadFile returned a file path
					downloadedFilePath = downloadResult
					console.log(`Downloaded to: ${downloadedFilePath}`)
				} else {
					// downloadFile returned a stream - this shouldn't happen with our usage
					throw new Error('Download returned a stream instead of file path')
				}

				// Check if file exists and rename it
				if (fs.existsSync(downloadedFilePath)) {
					fs.renameSync(downloadedFilePath, oggPath)
					console.log(`Renamed to: ${oggPath}`)
				} else {
					throw new Error(`Downloaded file not found at ${downloadedFilePath}`)
				}

				// Verify OGG file exists
				if (!fs.existsSync(oggPath)) {
					throw new Error(`OGG file not found at ${oggPath}`)
				}


				// Convert to MP3
				await this.convertOggToMp3(oggPath, mp3Path)

				// Verify MP3 file exists
				if (!fs.existsSync(mp3Path)) {
					throw new Error(`MP3 file not created at ${mp3Path}`)
				}

				// Get group members for context
				let members: GroupMember[] = []
				let existingTasks: any[] = []
				let userRole: string | null = null
				
				if (isGroup) {
					try {
						const chatMembers = await this.chatService.getChatMembers(chatId)
						members = chatMembers.map(member => ({
							name: member.firstName || member.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
							username: member.username
						}))
						
						// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã
						existingTasks = await this.taskService.getTasksByChat(chatId)
						
						// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						const currentMember = await this.chatService.getMemberWithRole(chatId, userId)
						userRole = currentMember?.role?.name || null
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∑–∞–¥–∞—á:', error)
					}
				} else {
					// –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
					try {
						existingTasks = await this.taskService.getPersonalTasks(userId)
					} catch (error) {
						console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:', error)
					}
				}

				// Process with Gemini
				const geminiResponse = this.geminiService ? await this.geminiService.processAudio(mp3Path, members, existingTasks, userRole) : 'Gemini AI is not configured'

				// Format response for user
				let formattedResponse: string
				if (typeof geminiResponse === 'string') {
					formattedResponse = geminiResponse
				} else {
					formattedResponse = ''
					
					// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
					const createdRoles: { [name: string]: number } = {}
					if (geminiResponse.roles && geminiResponse.roles.length > 0 && isGroup) {
						formattedResponse += '–°–æ–∑–¥–∞—é —Ä–æ–ª–∏:\n'
						for (const roleData of geminiResponse.roles) {
							try {
								const role = await this.roleService.createRole({
									name: roleData.name,
									chatId: chatId
								})
								createdRoles[roleData.name] = role.id
								formattedResponse += `‚úÖ –†–æ–ª—å "${roleData.name}" —Å–æ–∑–¥–∞–Ω–∞\n`
							} catch (dbError) {
								console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏:', dbError)
								formattedResponse += `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ "${roleData.name}"\n`
							}
						}
						formattedResponse += '\n'
					}

					formattedResponse += '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n'
					
					if (geminiResponse.tasks.length === 0) {
						formattedResponse += '–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
					} else {
						// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ë–î
						for (const task of geminiResponse.tasks) {
							try {
								let assignedToUserId: string | undefined = undefined
								let assignedToRoleId: number | undefined = undefined

								// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
								if (task.assignedToUser && isGroup) {
									// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –≤ –≥—Ä—É–ø–ø–µ
									const chatMembers = await this.chatService.getChatMembers(chatId)
									const assignedMember = chatMembers.find(member => 
										(member.firstName && member.firstName.toLowerCase().includes(task.assignedToUser!.toLowerCase())) ||
										(member.username && member.username.toLowerCase().includes(task.assignedToUser!.toLowerCase()))
									)
									if (assignedMember) {
										assignedToUserId = assignedMember.userId
									}
								}

								if (task.assignedToRole && createdRoles[task.assignedToRole]) {
									assignedToRoleId = createdRoles[task.assignedToRole]
								}

								if (isGroup) {
									// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ ID
									const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
									await this.taskService.createTaskWithAssignment({
										title: task.title,
										description: task.description,
										priority: task.priority,
										deadline: task.deadline ? new Date(task.deadline) : undefined,
										userId: userId,
										chatId: chatId,
										assignedToUserId,
										assignedToRoleId
									})
								} else {
									await this.taskService.createPersonalTask({
										...task,
										userId: userId
									})
								}
							} catch (dbError) {
								console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î:', dbError)
							}
						}

						geminiResponse.tasks.forEach((task, index) => {
							formattedResponse += `\n${index + 1}. ${task.title}\n`
							formattedResponse += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`
							formattedResponse += `   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(task.priority)}\n`
							if (task.deadline) {
								formattedResponse += `   –°—Ä–æ–∫: ${task.deadline}\n`
							}
							if (task.assignedToUser) {
								formattedResponse += `   –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞: ${task.assignedToUser}\n`
							}
							if (task.assignedToRole) {
								formattedResponse += `   –†–æ–ª—å: ${task.assignedToRole}\n`
							}
						})
					}

					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
					if (geminiResponse.taskOperations && geminiResponse.taskOperations.length > 0) {
						formattedResponse += '\n\nüîÑ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏:\n'
						
						for (const operation of geminiResponse.taskOperations) {
							try {
								const taskId = parseInt(operation.taskId)
								
								switch (operation.operation) {
									case 'delete':
										if (isGroup) {
											const success = await this.taskService.deleteGroupTask(taskId)
											if (success) {
												formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} —É–¥–∞–ª–µ–Ω–∞\n`
											} else {
												formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}\n`
											}
										} else {
											const success = await this.taskService.deleteTask(taskId, userId)
											if (success) {
												formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} —É–¥–∞–ª–µ–Ω–∞\n`
											} else {
												formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}\n`
											}
										}
										break

									case 'complete':
										if (isGroup) {
											const task = await this.taskService.updateGroupTask(taskId, { isCompleted: true })
											if (task) {
												formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è\n`
											} else {
												formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n`
											}
										} else {
											const task = await this.taskService.updateTask(taskId, userId, { isCompleted: true })
											if (task) {
												formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è\n`
											} else {
												formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n`
											}
										}
										break

									case 'update':
										if (operation.updateData) {
											const updateData: any = {}
											
											if (operation.updateData.title) updateData.title = operation.updateData.title
											if (operation.updateData.description) updateData.description = operation.updateData.description
											if (operation.updateData.priority) updateData.priority = operation.updateData.priority
											if (operation.updateData.deadline) updateData.deadline = operation.updateData.deadline
											if (operation.updateData.isCompleted !== undefined) updateData.isCompleted = operation.updateData.isCompleted

											// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
											if (operation.updateData.assignedToUser) {
												const targetMember = members.find(member => 
													(member.name && member.name.toLowerCase().includes(operation.updateData!.assignedToUser!.toLowerCase())) ||
													(member.username && member.username.toLowerCase().includes(operation.updateData!.assignedToUser!.toLowerCase()))
												)
												if (targetMember) {
													updateData.assignedToUserId = targetMember.username // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ userId
												}
											}

											if (operation.updateData.assignedToRole && createdRoles[operation.updateData.assignedToRole]) {
												updateData.assignedToRoleId = createdRoles[operation.updateData.assignedToRole]
											}

											if (isGroup) {
												const task = await this.taskService.updateGroupTask(taskId, updateData)
												if (task) {
													formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n`
												} else {
													formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}\n`
												}
											} else {
												const task = await this.taskService.updateTask(taskId, userId, updateData)
												if (task) {
													formattedResponse += `‚úÖ –ó–∞–¥–∞—á–∞ #${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n`
												} else {
													formattedResponse += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É #${taskId}\n`
												}
											}
										}
										break
								}
							} catch (operationError) {
								console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π:', operationError)
								formattedResponse += `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π #${operation.taskId}\n`
							}
						}
					}
				}

				// Send response back to user
				this.sendMessage(chatId, formattedResponse)

				// Clean up files
				if (fs.existsSync(oggPath)) {
					fs.unlinkSync(oggPath)
					console.log(`Cleaned up OGG file: ${oggPath}`)
				}
				if (fs.existsSync(mp3Path)) {
					fs.unlinkSync(mp3Path)
					console.log(`Cleaned up MP3 file: ${mp3Path}`)
				}

				console.log(`Voice message processed successfully: ${mp3FileName}`)
			} catch (error) {
				console.error('Error processing voice message:', error)

				let errorMessage = 'Unknown error occurred'
				let isProxyError = false

				if (error instanceof Error) {
					errorMessage = error.message

					// Check for common proxy-related errors
					if (
						errorMessage.includes('timeout') ||
						errorMessage.includes('ECONNREFUSED') ||
						errorMessage.includes('ENOTFOUND') ||
						errorMessage.includes('proxy')
					) {
						isProxyError = true
						console.warn('Proxy-related error detected:', errorMessage)
					}
				}

				// Provide user-friendly error message
				let userMessage = `Error processing voice message: ${errorMessage}`

				if (isProxyError) {
					userMessage +=
						'\n\nNote: There may be connectivity issues. The system will retry with direct connection if available.'
				}

				this.sendMessage(chatId, userMessage)

				// Clean up any partial files
				try {
					if (fs.existsSync(oggPath)) fs.unlinkSync(oggPath)
					if (fs.existsSync(mp3Path)) fs.unlinkSync(mp3Path)
				} catch (cleanupError) {
					console.warn('Error during cleanup:', cleanupError)
				}
			}
		})

		// Handle any message
		this.bot.on('message', msg => {
			const chatId = msg.chat.id.toString()
			console.log(`Received message: ${msg.text} from ${msg.from?.username}`)
		})
	}

	private initializeErrorHandling(): void {
		if (!this.bot) return

		this.bot.on('polling_error', error => {
			console.error('Polling error:', error)
		})

		this.bot.on('error', error => {
			console.error('Bot error:', error)
		})
	}

	public sendMessage(chatId: string | number, text: string): void {
		if (!this.bot) {
			console.error('Bot is not initialized')
			return
		}
		this.bot.sendMessage(chatId, text)
	}

	public getBot(): TelegramBot | undefined {
		return this.bot
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
export { TelegramBotController }
