import TelegramBot from 'node-telegram-bot-api'
import { GeminiService } from '../services/geminiService'
import { TaskService } from '../services/taskService'
import { ChatService } from '../services/chatService'
import { RoleService } from '../services/roleService'
import { CommandHandlerService } from '../services/commandHandlerService'
import { CallbackHandlerService } from '../services/callbackHandlerService'
import { VoiceHandlerService } from '../services/voiceHandlerService'
import { UserService } from '../services/userService'
import { MessageFormatterService } from '../services/messageFormatterService'

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
class TelegramBotController {
	private bot?: TelegramBot
	private token: string
	private taskService: TaskService
	private chatService: ChatService
	private roleService: RoleService
  private commandHandler: CommandHandlerService
  private callbackHandler: CallbackHandlerService
  private voiceHandler: VoiceHandlerService
	private geminiService: GeminiService
	private userService: UserService

	constructor(taskService: TaskService, chatService: ChatService, roleService: RoleService, geminiService: GeminiService, userService: UserService) {
		this.taskService = taskService
		this.chatService = chatService
		this.roleService = roleService
		this.geminiService = geminiService
		this.userService = userService
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
		this.voiceHandler = new VoiceHandlerService(taskService, chatService, roleService, userService, geminiService)
		this.commandHandler = new CommandHandlerService()
		this.callbackHandler = new CallbackHandlerService(taskService, chatService, userService)
		
		this.token = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN'
		if (this.token === 'YOUR_BOT_TOKEN') {
			console.error(
				'–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
			)
			return
		}

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
		const botOptions: any = {
			polling: true,
			request: {
				timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
			},
		}

		this.bot = new TelegramBot(this.token, botOptions)
		this.initializeHandlers()
		this.initializeErrorHandling()
		console.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
	}

	private initializeHandlers(): void {
		if (!this.bot) return
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
		this.bot.on('callback_query', async callbackQuery => {
			try {
				await this.callbackHandler.handleCallbackQuery(this.bot!, callbackQuery)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ callback query:', error)
			}
		})
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async msg => {
			try {
				await this.commandHandler.handleStart(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		this.bot.on('voice', async msg => {
			try {
				await this.voiceHandler.handleVoiceMessage(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
		this.bot.on('new_chat_members', async msg => {
			try {
				await this.handleNewChatMembers(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
		this.bot.on('my_chat_member', async msg => {
			try {
				await this.handleMyChatMember(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
			}
		})

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		this.bot.on('message', async msg => {
			try {
				await this.handleMessage(this.bot!, msg)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		})
	}

	private initializeErrorHandling(): void {
		if (!this.bot) return

		this.bot.on('polling_error', error => {
			console.error('Polling error:', error)
		})

		this.bot.on('error', error => {
			console.error('Bot error:', error)
		})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
	private async handleNewChatMembers(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const user = msg.from
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup || !user) return

		try {
			// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
			await this.chatService.createOrGetChat(
				{
					telegramId: chatId,
					title: msg.chat.title || 'Unknown Group',
					username: msg.chat.username
				}
			)


			if (user.is_bot) return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤

			// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			const member = await this.userService.createOrGetUser(
				{
					telegramId: user.id.toString(),
					username: user.username!,
					firstName: user.first_name,
					lastName: user.last_name
				}
			)

			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			await this.chatService.addMember(
				chatId,
				member.telegramId.toString(),
			)

			const personalWelcome = `üëã –ü—Ä–∏–≤–µ—Ç, ${MessageFormatterService.getTag(member)}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!\n\n` +
					'‚úÖ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
					'üìå –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.\n' +
					'üéôÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±–æ–π!'

			bot.sendMessage(chatId, personalWelcome)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	private async handleMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chat = msg.chat
		const user = msg.from
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
		const messageText = msg.text || msg.caption || '[—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'
		
		
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
		if (isGroup && user && !user.is_bot) {
			console.log(`Received message: ${messageText} from ${user?.username!}`)
			try {
				// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
				await this.chatService.createOrGetChat(
					{
						telegramId: chat.id.toString(),
						title: chat.title || 'Unknown Group',
						username: chat.username
					}
				)

				const member = await this.userService.createOrGetUser(
					{
						telegramId: user.id.toString(),
						username: user.username!,
						firstName: user.first_name || '',
						lastName: user.last_name || ''
					}
				)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
				const isRegistered = await this.chatService.isMember(chat.id.toString(), user.id.toString())
				
				if (!isRegistered) {
					// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await this.chatService.addMember(
						chat.id.toString(),
						user.id.toString(),
					)

					console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${user.id}) –≤ –≥—Ä—É–ø–ø–µ ${chat.id}`)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞
					if (!messageText.startsWith('/')) {
						const userTag = MessageFormatterService.getTag(member)
						const welcomeText = `‚úÖ ${userTag}, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!`
						
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ—É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
						const sentMessage = await bot.sendMessage(chat.id.toString(), welcomeText)

						setTimeout(async () => {
							try {
								await bot.deleteMessage(chat.id.toString(), sentMessage.message_id)
							} catch (deleteError) {
								console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', deleteError)
							}
						}, 5000)
					}
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
			}
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
	private async handleMyChatMember(bot: TelegramBot, msg: TelegramBot.ChatMemberUpdated): Promise<void> {
		const chat = msg.chat
		const isGroup = chat.type === 'group' || 	chat.type === 'supergroup'
		const newStatus = msg.new_chat_member?.status
		const oldStatus = msg.old_chat_member?.status

		if (!isGroup) return

		try {
			// –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É (—Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º)
			if (newStatus === 'member' && (oldStatus === 'left' || oldStatus === 'kicked' || !oldStatus)) {
				console.log(`–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: ${msg.chat.title}`)
				await this.handleBotAddedToGroup(bot, msg, false)
			}
			// –ï—Å–ª–∏ –±–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
			else if (newStatus === 'administrator' && oldStatus === 'member') {
				console.log(`–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ: ${msg.chat.title}`)
				await this.handleBotBecameAdmin(bot, msg)
			}
			// –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ä–∞–∑—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
			else if (newStatus === 'administrator' && (oldStatus === 'left' || oldStatus === 'kicked' || !oldStatus)) {
				console.log(`–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${msg.chat.title}`)
				await this.handleBotAddedToGroup(bot, msg, true)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
	private async handleBotAddedToGroup(bot: TelegramBot, msg: TelegramBot.ChatMemberUpdated, isAdmin: boolean): Promise<void> {
		const chat = msg.chat

		// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
		await this.chatService.createOrGetChat(
			{
				telegramId: chat.id.toString(),
				title: chat.title || 'Unknown Group',
				username: chat.username || ''
			}
		)

		// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
		await this.registerExistingMembers(bot, chat.id.toString())

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
		const welcomeMessage = 'üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏!\n\n' +
			'üéôÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±–æ–π:\n\n' +
			'üìå –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n' +
			'‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"\n' +
			'‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏"\n' +
			'‚Ä¢ "–ù–∞–∑–Ω–∞—á—å –∑–∞–¥–∞—á—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –ê–Ω–Ω—É"\n' +
			'‚Ä¢ "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"\n' +
			'‚Ä¢ "–ü–æ–∫–∞–∂–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"\n\n' +
			'‚ú® –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —è –ø–æ–π–º—É!\n\n' +
			(isAdmin ? 
				'‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Å–µ–π—á–∞—Å –∑–∞–∫—Ä–µ–ø–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!' :
				'‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã')

		// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
		const keyboard = {
			inline_keyboard: [
				[
					{
						text: 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
						callback_data: 'register'
					},
					
				],
			]
		}

		const sentMessage = await bot.sendMessage(chat.id.toString(), welcomeMessage, {
			reply_markup: keyboard
		})

		if (isAdmin) {
			// –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω, —Å—Ä–∞–∑—É –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			try {
				await bot.pinChatMessage(chat.id.toString(), sentMessage.message_id)
				await this.chatService.updateWelcomeMessage(chat.id.toString(), sentMessage.message_id)
				bot.sendMessage(chat.id.toString(), 'üìå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
			}
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
			await this.chatService.updateWelcomeMessage(chat.id.toString(), sentMessage.message_id)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	private async handleBotBecameAdmin(bot: TelegramBot, msg: TelegramBot.ChatMemberUpdated): Promise<void> {
		const chatId = msg.chat.id.toString()

		try {
			// –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			const welcomeMessageId = await this.chatService.getWelcomeMessageId(chatId)

			if (welcomeMessageId) {
				// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				await bot.pinChatMessage(chatId, welcomeMessageId)
				bot.sendMessage(chatId, 'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\nüìå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
				bot.sendMessage(chatId, 'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.')
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
			bot.sendMessage(chatId, 'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
		}
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º)
	private async registerExistingMembers(bot: TelegramBot, chatId: string): Promise<void> {
		try {
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
			const chatAdministrators = await bot.getChatAdministrators(chatId)
			
			let registeredCount = 0
			for (const admin of chatAdministrators) {
				if (admin.user.is_bot) continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
				
				const isRegistered = await this.chatService.isMember(chatId, admin.user.id.toString())
				if (!isRegistered) {
					const member = await this.userService.createOrGetUser(
						{
							telegramId: admin.user.id.toString(),
							username: admin.user.username || '',
							firstName: admin.user.first_name || '',
							lastName: admin.user.last_name || ''
						}
					)
					await this.chatService.addMember(
						chatId,
						admin.user.id.toString(),
					)
					registeredCount++
				}
			}

			if (registeredCount > 0) {
				console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${registeredCount} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ${chatId}`)
			}

		} catch (error) {
			console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
		}
	}

	public sendMessage(chatId: string | number, text: string): void {
		if (!this.bot) {
			console.error('Bot is not initialized')
			return
		}
		this.bot.sendMessage(chatId, text)
	}

	public getBot(): TelegramBot | undefined {
		return this.bot
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
export { TelegramBotController }
