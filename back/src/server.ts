import 'dotenv/config'
import 'reflect-metadata'
import express, { Application } from 'express'
import cors from 'cors'
import { DataSource } from 'typeorm'
import { TaskEntity } from './entities/Task'
import { UserEntity } from './entities/User'
import { TaskService } from './services/taskService'
import { TelegramBotController } from './controllers/telegramBotController'
import logger from './middleware/logger'
import { ChatService } from './services/chatService'
import { MessageFormatter } from './services/formatter'
import { ChatMemberEntity } from './entities/ChatMember'
import { ChatEntity } from './entities/Chat'
import { RoleEntity } from './entities/Role'
import { UserService } from './services/userService'
import { RoleService } from './services/roleService'
import { GeminiService } from './services/geminiService'
import { NotificationService } from './services/notificationService'
import apiRoutes from './routes'

process.on('unhandledRejection', (reason, promise) => {
	console.error('Unhandled Rejection at:', promise, 'reason:', reason)
})

process.on('uncaughtException', error => {
	console.error('Uncaught Exception:', error)
})

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
export let dataSource: DataSource
export let taskService: TaskService
export let chatService: ChatService
export let userService: UserService
export let roleService: RoleService
export let geminiService: GeminiService
export let telegramBotController: TelegramBotController
export let notificationService: NotificationService

// –ö–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
class Server {
	private app: Application
	private port: number

	constructor(port: number = 3000) {
		this.app = express()
		this.port = port
		this.initializeDatabase()
		this.initializeMiddleware()
		this.initializeRoutes()
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	private async initializeDatabase(): Promise<void> {
		dataSource = new DataSource({
			type: 'postgres',
			host: process.env.DB_HOST || 'localhost',
			port: parseInt(process.env.DB_PORT || '5432'),
			username: process.env.DB_USER || 'user',
			password: process.env.DB_PASSWORD || 'password',
			database: process.env.DB_NAME || 'trackit',
			entities: [TaskEntity, UserEntity, ChatEntity, ChatMemberEntity, RoleEntity],
			synchronize: true, // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
			logging: false,
			dropSchema: true,
		})

		try {
			await dataSource.initialize()
			taskService = new TaskService(dataSource)
			chatService = new ChatService(dataSource)
			userService = new UserService(dataSource)
			roleService = new RoleService(dataSource)
			geminiService = new GeminiService(process.env.GEMINI_API_KEY || '')
			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
			telegramBotController = new TelegramBotController(
				taskService,
				chatService,
				roleService,
				geminiService,
				userService
			)
			
			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
			const bot = telegramBotController.getBot()
			if (bot) {
				notificationService = new NotificationService(dataSource, bot)
				notificationService.startNotificationScheduler()
			} else {
				console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
			}
			
		} catch (error) {
			console.error(MessageFormatter.ERRORS.GENERAL, error)
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
	private initializeMiddleware(): void {
		// CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP –∏ HTTPS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
		const allowedOrigins = [
			'http://localhost:5173',
			'https://localhost:5173',
			process.env.FRONTEND_URL,
		].filter(Boolean) // –£–±–∏—Ä–∞–µ–º undefined –µ—Å–ª–∏ FRONTEND_URL –Ω–µ –∑–∞–¥–∞–Ω
		
		this.app.use(cors({
			origin: (origin, callback) => {
				// –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, Postman –∏–ª–∏ curl)
				if (!origin) return callback(null, true)
				
				// –†–∞–∑—Ä–µ—à–∞–µ–º localhost —Å –ª—é–±—ã–º –ø–æ—Ä—Ç–æ–º
				if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
					return callback(null, true)
				}
				
				// –†–∞–∑—Ä–µ—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ (192.168.x.x, 10.x.x.x)
				if (origin.match(/^https?:\/\/(192\.168\.|10\.)\d+\.\d+:\d+$/)) {
					return callback(null, true)
				}
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
				if (allowedOrigins.includes(origin)) {
					return callback(null, true)
				}
				
				callback(new Error('Not allowed by CORS'))
			},
			credentials: true,
		}))
		this.app.use(express.json())
		this.app.use(logger)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
	private initializeRoutes(): void {
		// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		this.app.get('/', (req, res) => {
			res.send(MessageFormatter.BOT_MESSAGES.SERVER_WORKING)
		})
		
		// API –º–∞—Ä—à—Ä—É—Ç—ã
		this.app.use('/api', apiRoutes)
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API
		this.app.use('/api/*', (req, res) => {
			res.status(404).json({
				success: false,
				error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
			})
		})
	}

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	public start(): void {
		// –°–ª—É—à–∞–µ–º –Ω–∞ 0.0.0.0 —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
		this.app.listen(this.port, '0.0.0.0', () => {
			console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${this.port}`)
			console.log(`üì± –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏`)
		})
	}
}

const server = new Server()
server.start()
