import TelegramBot from 'node-telegram-bot-api'
import { ContextService } from './contextService'
import { GeminiService } from './geminiService'
import { TaskService } from './taskService'
import { AudioTranscriptionResponse, Task, TaskOperation } from '../types'
import { MessageFormatter, TaskFormatter, OperationFormatter } from './formatter'
import { convertOggToMp3, ensureDownloadsDirectory } from '../utils/fileUtils'
import path from 'path'
import * as fs from 'fs'

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * 
 * @description –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≥–æ–ª–æ—Å–æ–≤–æ–µ/—Ç–µ–∫—Å—Ç–æ–≤–æ–µ), –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç,
 * –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ Gemini AI –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏.
 * 
 * @example
 * ```typescript
 * const messageProcessor = new MessageProcessor(contextService, geminiService, taskService)
 * const response = await messageProcessor.processMessage(bot, message)
 * ```
 */
export class MessageProcessor {
	private contextService: ContextService
	private geminiService: GeminiService
	private taskService: TaskService

	/**
	 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MessageProcessor
	 * 
	 * @param contextService - –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	 * @param geminiService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini AI
	 * @param taskService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
	 */
	constructor(contextService: ContextService, geminiService: GeminiService, taskService: TaskService) {
		this.contextService = contextService
		this.geminiService = geminiService
		this.taskService = taskService
		ensureDownloadsDirectory()
	}

	/**
	 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	 * 
	 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—è–º–∏ Telegram
	 * –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Gemini AI.
	 * 
	 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
	 * @param msg - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	 * 
	 * @example
	 * ```typescript
	 * await messageProcessor.handleMessage(bot, message)
	 * ```
	 */
	async handleMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const isVoiceMessage = !!msg.voice
		const isTextMessage = !!msg.text
		
		if (!isVoiceMessage && !isTextMessage) return

		try {
			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –¥—É–º–∞—é—â–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'ü§î' }],
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			const response = await this.processMessage(bot, msg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
			await bot.sendMessage(chatId, response, {
					reply_to_message_id: msg.message_id,
					parse_mode: 'HTML'
				})

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –≥–∞–ª–æ—á–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üçì' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

		} catch (error) {
			console.error('Error processing message:', error)

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üíî' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

			await bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ)
	 * 
	 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
	 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
	 * —á–µ—Ä–µ–∑ Gemini AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
	 * 
	 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
	 * @param msg - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 * 
	 * @example
	 * ```typescript
	 * const response = await messageProcessor.processMessage(bot, message)
	 * await bot.sendMessage(chatId, response)
	 * ```
	 */
	private async processMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<string> {
		const chatId = msg.chat.id.toString()
		const userId = msg.from!.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
		const isVoiceMessage = !!msg.voice
		const isTextMessage = !!msg.text
		
		if (!isVoiceMessage && !isTextMessage) {
			return MessageFormatter.ERRORS.GENERAL
		}

		// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
		let oggPath: string | undefined
		let mp3Path: string | undefined

		try {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if (isVoiceMessage) {
				const voiceResult = await this.processVoiceMessage(bot, msg)
				oggPath = voiceResult.oggPath
				mp3Path = voiceResult.mp3Path
			}

			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
			const context = await this.contextService.getContext(msg)

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Gemini
			const geminiResult = await this.geminiService.processMessage(
				isVoiceMessage ? mp3Path! : msg.text!,
				context.author,
				context.tasks,
				context.roles,
				context.members,
				context.isGroup,
				isVoiceMessage
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
			if (!geminiResult) {
				return MessageFormatter.ERRORS.UNAVAILABLE
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
			if (typeof geminiResult === 'string') {
				return geminiResult
			}

			const geminiResponse = geminiResult as AudioTranscriptionResponse

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			return await this.processGeminiResponse(geminiResponse, chatId, userId, context.isGroup, context.members)

		} catch (error) {
			console.error('Error processing message:', error)
			return MessageFormatter.ERRORS.GENERAL
		} finally {
			// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if (isVoiceMessage && oggPath && mp3Path) {
				this.cleanupFiles(oggPath, mp3Path)
			}
		}
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	 */
	private async processVoiceMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<{ oggPath: string, mp3Path: string }> {
		const fileId = msg.voice!.file_id
		const oggFileName = `voice_${Date.now()}.ogg`
		const mp3FileName = `voice_${Date.now()}.mp3`
		const downloadsDir = path.join(__dirname, '../downloads')
		const oggPath = path.join(downloadsDir, oggFileName)
		const mp3Path = path.join(downloadsDir, mp3FileName)

		// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
		const fileInfo = await bot.getFile(fileId)
		const downloadResult = await bot.downloadFile(fileId, downloadsDir)

		let downloadedFilePath: string
		if (typeof downloadResult === 'string') {
			downloadedFilePath = downloadResult
		} else {
			throw new Error('Download returned a stream instead of file path')
		}

		// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
		if (fs.existsSync(downloadedFilePath)) {
			fs.renameSync(downloadedFilePath, oggPath)
		} else {
			throw new Error(`Downloaded file not found at ${downloadedFilePath}`)
		}

		if (!fs.existsSync(oggPath)) {
			throw new Error(`OGG file not found at ${oggPath}`)
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
		await convertOggToMp3(oggPath, mp3Path)

		if (!fs.existsSync(mp3Path)) {
			throw new Error(`MP3 file not created at ${mp3Path}`)
		}

		return { oggPath, mp3Path }
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini
	 */
	private async processGeminiResponse(
		geminiResponse: AudioTranscriptionResponse,
		chatId: string,
		userId: string,
		isGroup: boolean,
		members: any[]
	): Promise<string> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π)
		if (geminiResponse.customMessage) {
			return geminiResponse.customMessage
		}

		const formattedResponse = []

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
		if (geminiResponse.tasks && geminiResponse.tasks.length > 0) {
			formattedResponse.push(await this.processTasksCreation(geminiResponse.tasks, userId, chatId, isGroup))
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
		if (geminiResponse.taskOperations && geminiResponse.taskOperations.length > 0) {
			formattedResponse.push(await this.processTaskOperations(geminiResponse.taskOperations, isGroup))
		}

		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if (formattedResponse.length === 0) {
			return '–ó–∞–¥–∞—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è'
		}

		return formattedResponse.join('\n\n')
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
	 */
	private async processTasksCreation(tasks: Task[], userId: string, chatId: string, isGroup: boolean): Promise<string> {
		const result = [MessageFormatter.SUCCESS]
		for (const task of tasks) {
			try {
				// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
				const createdTask = await this.taskService.createTask({
					title: task.title,
					description: task.description,
					deadline: task.deadline ? new Date(task.deadline) : undefined,
					chatId: isGroup ? chatId : undefined,
					// –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					assignedUserId: task.assignedUserId ?? userId,
					assignedRoleId: task.assignedRoleId ?? undefined,
				})

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
				result.push(TaskFormatter.formatTask(createdTask))
			} catch (dbError) {
				console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î:', dbError)
				result.push(MessageFormatter.ERRORS.GENERAL + '\n')
			}
		}
		return result.join('\n\n')
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
	 */
	private async processTaskOperations(operations: TaskOperation[], isGroup: boolean): Promise<string> {
		const response = []

		for (const operation of operations) {
			try {
				const task = await this.taskService.getTaskById(operation.taskId)
				if (!task) continue

				switch (operation.operation) {
					case 'delete':
						const deleteSuccess = await this.taskService.deleteTask(task.id)
						response.push(OperationFormatter.formatTaskOperation(operation.operation, task))
						break

					case 'update':
						if (operation.updateData) {
							const updateData = {
								...operation.updateData,
								deadline: operation.updateData.deadline
									? new Date(operation.updateData.deadline)
									: undefined,
							}

							const updatedTask = await this.taskService.updateTask(task.id, updateData)
							if (updatedTask) {
								response.push(OperationFormatter.formatTaskUpdate(task, updatedTask, operation.updateData))
							}
						}
						break

					case 'complete':
						const completeData = { isCompleted: true }
						const completedTask = await this.taskService.updateTask(task.id, completeData)
						if (completedTask) {
							response.push(OperationFormatter.formatTaskUpdate(task, completedTask, completeData))
						}
						break
				}
			} catch (operationError) {
				console.error(MessageFormatter.ERRORS.GENERAL, operationError)
				response.push(MessageFormatter.ERRORS.GENERAL + '\n')
			}
		}

		return response.join('\n')
	}

	/**
	 * –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
	 */
	private cleanupFiles(oggPath: string, mp3Path: string): void {
		if (fs.existsSync(oggPath)) {
			fs.unlinkSync(oggPath)
		}
		if (fs.existsSync(mp3Path)) {
			fs.unlinkSync(mp3Path)
		}
	}
}
