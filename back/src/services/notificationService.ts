import { DataSource, Repository, MoreThan } from 'typeorm'
import { TaskEntity } from '../entities/Task'
import TelegramBot from 'node-telegram-bot-api'
import { UserNotificationService } from './userNotificationService'

export class NotificationService {
	private taskRepository: Repository<TaskEntity>
	private bot: TelegramBot
	private userNotificationService: UserNotificationService

	private readonly CHECK_INTERVAL_MS = 60 * 1000

	constructor(dataSource: DataSource, bot: TelegramBot) {
		this.taskRepository = dataSource.getRepository(TaskEntity)
		this.bot = bot
		this.userNotificationService = new UserNotificationService(dataSource)
	}

	/**
	 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	 */
	public async checkNotifications(): Promise<void> {
		try {
			
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
			const tasksWithDeadlines = await this.getTasksWithDeadlines()
			
			for (const task of tasksWithDeadlines) {
				await this.processTaskNotifications(task)
			}
			
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
		}
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
	 */
	private async getTasksWithDeadlines(): Promise<TaskEntity[]> {
		const now = new Date()
		
		return await this.taskRepository.find({
			where: {
				isCompleted: false,
				deadline: MoreThan(now), // –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±—É–¥—É—â–µ–º
			},
			relations: ['author', 'chat', 'assignedUser', 'assignedRole'],
		})
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
	 */
	private async processTaskNotifications(task: TaskEntity): Promise<void> {
		if (!task.deadline) return

		const now = new Date()
		const timeUntilDeadline = task.deadline.getTime() - now.getTime()
		
		// –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if (timeUntilDeadline <= 0) return

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		const targetUserId = this.getNotificationTargetUserId(task)
		if (!targetUserId) return

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const notificationsEnabled = await this.userNotificationService.areNotificationsEnabled(
			targetUserId, 
			task.type
		)
		
		if (!notificationsEnabled) return

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const intervals = await this.userNotificationService.getUserNotificationIntervals(
			targetUserId, 
			task.type
		)
		
		if (!intervals || intervals.length === 0) return

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
		for (const interval of intervals) {
			if (this.shouldSendNotification(interval, timeUntilDeadline)) {
				await this.sendNotification(task, interval.name, targetUserId)
			}
		}
	}

	/**
	 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	 */
	private getNotificationTargetUserId(task: TaskEntity): string | null {
		if (task.type === 'group' && task.assignedUserId) {
			return task.assignedUserId
		}
		
		return task.authorId
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	 */
	private shouldSendNotification(
		interval: { name: string; ms: number }, 
		timeUntilDeadline: number
	): boolean {
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		const tolerance = this.CHECK_INTERVAL_MS
		return timeUntilDeadline <= interval.ms && timeUntilDeadline > (interval.ms - tolerance)
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	private async sendNotification(
		task: TaskEntity, 
		intervalName: string, 
		targetUserId: string
	): Promise<void> {
		try {
			const message = this.formatNotificationMessage(task, intervalName)
			
			await this.bot.sendMessage(targetUserId, message, { parse_mode: 'HTML' })
			console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –æ –∑–∞–¥–∞—á–µ ${task.readableId}`)
			
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.readableId}:`, error)
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	 */
	private formatNotificationMessage(
		task: TaskEntity, 
		intervalName: string
	): string {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
		const deadlineDate = new Date(task.deadline!)
		const deadlineText = deadlineDate.toLocaleString('ru-RU')
		
		let message = `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ</b>\n\n`
		message += `<b>${task.title}</b>\n`
		message += `üìù ${task.description}\n\n`
		message += `‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>${intervalName}</b>\n`
		message += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadlineText}\n`
		message += `üÜî –ó–∞–¥–∞—á–∞: ${task.readableId}\n`

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞–¥–∞—á–∏
		if (task.type === 'group') {
			message += `üë• –ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–¥–∞—á–∞`
			if (task.chat) {
				message += ` –∏–∑ "<b>${task.chat.title}</b>"`
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á
		if (task.type === 'group' && task.assignedRole) {
			message += `\nüéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª–∏: ${task.assignedRole.name}`
		}

		return message
	}

	/**
	 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	 */
	public startNotificationScheduler(): void {
		console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
		
		// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
		this.checkNotifications()
		
		// –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
		setInterval(() => {
			this.checkNotifications()
		}, this.CHECK_INTERVAL_MS)
		
		console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)')
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä UserNotificationService –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	 */
	public getUserNotificationService(): UserNotificationService {
		return this.userNotificationService
	}
}