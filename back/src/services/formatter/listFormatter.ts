import { TaskEntity } from '../../entities/Task'
import { ChatMemberEntity } from '../../entities/ChatMember'
import { RoleEntity } from '../../entities/Role'
import { Role } from '../../types'
import { UserFormatter } from './userFormatter'
import { TaskFormatter } from './taskFormatter'
import { RoleFormatter } from './roleFormatter'
import { MessageFormatter } from './messageFormatter'

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
 */
export class ListFormatter {
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
	 */
	static formatTasksList(tasks: TaskEntity[]): string {
		if (tasks.length === 0) {
			return 'üìã <b>–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!'
		}

		let response = `üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (${tasks.length})</b>\n\n`
		tasks.forEach((task, index) => {
			response += `${index + 1}. ${TaskFormatter.formatTask(task)}\n\n`
		})
		return response.trim()
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
	 */
	static formatMembersList(members: ChatMemberEntity[]): string {
		if (members.length === 0) {
			return 'üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>'
		}

		let response = `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã (${members.length})</b>\n\n`
		members.forEach((member, index) => {
			const userInfo = UserFormatter.createShortInfo(member.user)
			const roleInfo = member.role ? ` - ${member.role.name}` : ` - ${MessageFormatter.VARIANTS.NO_ROLE}`
			response += `${index + 1}. ${userInfo}${roleInfo}\n`
		})
		return response.trim()
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
	 */
	static formatRolesList(roles: RoleEntity[]): string {
		if (roles.length === 0) {
			return 'üé≠ <b>–†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–æ–ª—å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!'
		}

		let response = `üé≠ <b>–†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ (${roles.length})</b>\n\n`
		roles.forEach((role, index) => {
			response += `${index + 1}. ${RoleFormatter.formatRoleShort(role)}\n`
		})
		return response.trim()
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–∑ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏–∑ API –æ—Ç–≤–µ—Ç–æ–≤
	 */
	static formatTypedRolesList(roles: Role[]): string {
		if (roles.length === 0) {
			return 'üé≠ <b>–†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>'
		}

		let response = `üé≠ <b>–†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ (${roles.length})</b>\n\n`
		roles.forEach((role, index) => {
			response += `${index + 1}. üé≠ ${role.name}\n`
		})
		return response.trim()
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
	 */
	static formatUserTasksList(tasks: TaskEntity[], userId: string): string {
		if (tasks.length === 0) {
			return 'üìã <b>–ù–∞ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞—á</b>'
		}

		let response = `üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏ (${tasks.length})</b>\n\n`
		tasks.forEach((task, index) => {
			response += `${index + 1}. ${TaskFormatter.formatTask(task)}\n\n`
		})
		return response.trim()
	}


	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏
	 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
	 */
	static formatRoleMembersList(role: RoleEntity): string {
		if (!role.members || role.members.length === 0) {
			return `üé≠ <b>${role.name}</b>\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`
		}

		let response = `üé≠ <b>${role.name}</b>\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (${role.members.length}):\n\n`
		role.members.forEach((member, index) => {
			const userInfo = UserFormatter.createShortInfo(member.user)
			response += `${index + 1}. ${userInfo}\n`
		})
		return response.trim()
	}
}
