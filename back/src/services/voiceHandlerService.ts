import TelegramBot from 'node-telegram-bot-api'
import { MessageProcessor } from './messageProcessor'
import { MessageFormatter } from './formatter'

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * 
 * @description –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏ Telegram –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
 * –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ MessageProcessor.
 * 
 * @example
 * ```typescript
 * const voiceHandler = new VoiceHandlerService(messageProcessor)
 * await voiceHandler.handleMessage(bot, message)
 * ```
 */
export class VoiceHandlerService {
	private messageProcessor: MessageProcessor

	/**
	 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä VoiceHandlerService
	 * 
	 * @param messageProcessor - –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
	 */
	constructor(messageProcessor: MessageProcessor) {
		this.messageProcessor = messageProcessor
	}

	/**
	 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	 * 
	 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—è–º–∏ Telegram
	 * –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ MessageProcessor.
	 * 
	 * @param bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
	 * @param msg - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	 * 
	 * @example
	 * ```typescript
	 * await voiceHandler.handleMessage(bot, message)
	 * ```
	 */
	async handleMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const isVoiceMessage = !!msg.voice
		const isTextMessage = !!msg.text
		
		if (!isVoiceMessage && !isTextMessage) return

		try {
			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –¥—É–º–∞—é—â–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'ü§î' }],
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageProcessor
			const response = await this.messageProcessor.processMessage(bot, msg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
			await bot.sendMessage(chatId, response, {
					reply_to_message_id: msg.message_id,
					parse_mode: 'HTML'
				})

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –≥–∞–ª–æ—á–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üçì' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

		} catch (error) {
			console.error('Error processing message:', error)

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üíî' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn(MessageFormatter.ERRORS.GENERAL, reactionError)
			}

			await bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}
}