import TelegramBot from 'node-telegram-bot-api'
import { GeminiService } from './geminiService'
import { TaskService } from './taskService'
import { ChatService } from './chatService'
import { RoleService } from './roleService'
import { UserService } from './userService'
import { Formatter } from './formatter/formatter'
import path from 'path'
import {
	GeminiUser,
	GeminiRole,
	GeminiTask,
	GeminiChatMember,
	TaskOperation,
	RoleOperation,
	AudioTranscriptionResponse,
	ViewRequest,
	Role,
	Task,
} from '../types'
import { convertOggToMp3, ensureDownloadsDirectory } from '../utils/fileUtils'
import * as fs from 'fs'
import { RoleEntity } from '../entities/Role'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export class VoiceHandlerService {
	private taskService: TaskService
	private chatService: ChatService
	private roleService: RoleService
	private userService: UserService
	private geminiService?: GeminiService

	constructor(
		taskService: TaskService,
		chatService: ChatService,
		roleService: RoleService,
		userService: UserService,
		geminiService?: GeminiService
	) {
		this.taskService = taskService
		this.chatService = chatService
		this.roleService = roleService
		this.userService = userService
		this.geminiService = geminiService
		ensureDownloadsDirectory()
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	async handleVoiceMessage(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const userId = msg.from!.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
		const fileId = msg.voice!.file_id
		const oggFileName = `voice_${Date.now()}.ogg`
		const mp3FileName = `voice_${Date.now()}.mp3`
		const downloadsDir = path.join(__dirname, '../downloads')
		const oggPath = path.join(downloadsDir, oggFileName)
		const mp3Path = path.join(downloadsDir, mp3FileName)

		try {
			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –¥—É–º–∞—é—â–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'ü§î' }],
				})
			} catch (reactionError) {
				console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é:', reactionError)
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
			}

			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
			const fileInfo = await bot.getFile(fileId)

			const downloadResult = await bot.downloadFile(fileId, downloadsDir)

			let downloadedFilePath: string

			if (typeof downloadResult === 'string') {
				downloadedFilePath = downloadResult
			} else {
				throw new Error('Download returned a stream instead of file path')
			}

			// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
			if (fs.existsSync(downloadedFilePath)) {
				fs.renameSync(downloadedFilePath, oggPath)
			} else {
				throw new Error(`Downloaded file not found at ${downloadedFilePath}`)
			}

			if (!fs.existsSync(oggPath)) {
				throw new Error(`OGG file not found at ${oggPath}`)
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
			await convertOggToMp3(oggPath, mp3Path)

			if (!fs.existsSync(mp3Path)) {
				throw new Error(`MP3 file not created at ${mp3Path}`)
			}

			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Gemini (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î)
			let users: GeminiUser[] = []
			let roles: GeminiRole[] = []
			let tasks: GeminiTask[] = []
			let members: GeminiChatMember[] = []
			let currentUserRole: GeminiRole | null = null

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
			const author: GeminiUser = {
				telegramId: userId,
				username: msg.from?.username || userId,
				firstName: msg.from?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
				lastName: msg.from?.last_name,
			}

			if (isGroup) {
				try {
					// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
					await this.userService.createOrGetUser({
						telegramId: userId,
						firstName: msg.from?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
						lastName: msg.from?.last_name,
						username: msg.from?.username || userId,
					})

					await this.chatService.createOrGetChat({
						telegramId: chatId,
						title: msg.chat.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç',
						username: msg.chat.username,
					})

					// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
					const chatMembers = await this.chatService.getChatMembers(chatId)

					// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è Gemini
					users = chatMembers.map(member => ({
						telegramId: member.user?.telegramId || member.userId,
						username: member.user?.username || '',
						firstName: member.user?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
						lastName: member.user?.lastName,
					}))

					members = chatMembers.map(member => ({
						userId: member.userId,
						username: member.user?.username || '',
						firstName: member.user?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
						lastName: member.user?.lastName,
						roleId: member.roleId,
						roleName: member.role?.name,
					}))

					// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
					const chatRoles = await this.roleService.getChatRoles(chatId)
					roles = chatRoles.map(role => ({
						id: role.id,
						name: role.name,
						chatId: role.chatId,
						memberIds: role.members?.map(m => m.userId) || [],
					}))

					// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
					const groupTasks = await this.taskService.getGroupTasks(chatId)
					tasks = groupTasks.map(task => ({
						id: task.id,
						readableId: task.readableId,
						title: task.title,
						description: task.description,
						priority: task.priority,
						deadline: task.deadline ? String(task.deadline) : null,
						type: task.type,
						authorId: task.authorId,
						chatId: task.chatId,
						assignedUserId: task.assignedUserId,
						assignedRoleId: task.assignedRoleId,
						isCompleted: task.isCompleted,
					}))
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥—Ä—É–ø–ø—ã:', error)
				}
			} else {
				try {
					// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					const user = await this.userService.createOrGetUser({
						telegramId: userId,
						firstName: msg.from?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
						lastName: msg.from?.last_name,
						username: msg.from?.username || userId,
					})

					users = [user]

					// –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
					const personalTasks = await this.taskService.getPersonalTasks(userId)
					tasks = personalTasks.map(task => ({
						id: task.id,
						readableId: task.readableId,
						title: task.title,
						description: task.description,
						priority: task.priority,
						deadline: task.deadline ? String(task.deadline) : null,
						type: task.type,
						authorId: task.authorId,
						chatId: task.chatId,
						assignedUserId: task.assignedUserId,
						assignedRoleId: task.assignedRoleId,
						isCompleted: task.isCompleted,
					}))
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:', error)
				}
			}

			const geminiResult = this.geminiService
				? await this.geminiService.processAudio(mp3Path, author, users, tasks, roles)
				: null

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
			if (!geminiResult) {
				await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
				return
			}

			if (typeof geminiResult === 'string') {
				await bot.sendMessage(chatId, geminiResult)
				return
			}

			const geminiResponse = geminiResult as AudioTranscriptionResponse

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			const formattedResponse = await this.processGeminiResponse(geminiResponse, chatId, userId, isGroup, members)

			await bot.sendMessage(chatId, formattedResponse, {
					reply_to_message_id: msg.message_id,
					parse_mode: 'HTML'
				})

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –≥–∞–ª–æ—á–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üçì' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é:', reactionError)
			}

			// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
			this.cleanupFiles(oggPath, mp3Path)
		} catch (error) {
			console.error('Error processing voice message:', error)

			// –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
			try {
				await bot.setMessageReaction(chatId, msg.message_id, {
					reaction: [{ type: 'emoji', emoji: 'üíî' }],
					is_big: false,
				})
			} catch (reactionError) {
				console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –æ—à–∏–±–∫–∏:', reactionError)
			}

			this.handleVoiceError(bot, chatId, error, oggPath, mp3Path)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
	private async processGeminiResponse(
		geminiResponse: AudioTranscriptionResponse,
		chatId: string,
		userId: string,
		isGroup: boolean,
		members: GeminiChatMember[]
	): Promise<string> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π)
		if (geminiResponse.customMessage) {
			return geminiResponse.customMessage
		}

		const formattedResponse = []

		// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
		if (geminiResponse.roles && geminiResponse.roles.length > 0 && isGroup) {
			formattedResponse.push(await this.processRolesCreation(geminiResponse.roles, chatId))
		}

		// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
		if (geminiResponse.tasks && geminiResponse.tasks.length > 0) {
			formattedResponse.push(await this.processTasksCreation(geminiResponse.tasks, userId, chatId, isGroup))
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–æ–ª—è–º–∏
		if (geminiResponse.roleOperations && geminiResponse.roleOperations.length > 0 && isGroup) {
			formattedResponse.push(await this.processRoleOperations(geminiResponse.roleOperations, chatId))
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
		if (geminiResponse.taskOperations && geminiResponse.taskOperations.length > 0) {
			formattedResponse.push(await this.processTaskOperations(geminiResponse.taskOperations))
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
		if (geminiResponse.viewRequests && geminiResponse.viewRequests.length > 0) {
			formattedResponse.push(await this.processViewRequests(geminiResponse.viewRequests, chatId, userId, isGroup))
		}

		return formattedResponse.join('\n\n')
	}


	private async processRolesCreation(roles: Role[], chatId: string): Promise<string> {
		const result = []
		for (const roleData of roles) {
			let role: RoleEntity | undefined
			try {
				role = await this.roleService.createRole({
					name: roleData.name,
					chatId,
				})
			} catch (dbError) {
				console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏:', dbError)
			}

			const success = !!role
			result.push(
				Formatter.formatRoleOperation(
					{
						operation: 'create',
						roleName: roleData.name,
					},
					success,role
				)
			)
		}
		return result.join('\n')
	}

	private async processTasksCreation(tasks: Task[], userId: string, chatId: string, isGroup: boolean): Promise<string> {
		const result = ["–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:"]
		for (const task of tasks) {
				try {
					// –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
					const createdTask = await this.taskService.createTask({
						title: task.title,
						description: task.description,
						priority: task.priority,
						deadline: task.deadline ? new Date(task.deadline) : undefined,
						authorId: userId,
						chatId: isGroup ? chatId : undefined,
						assignedUserId: task.assignedUserId ?? undefined,
						assignedRoleId: task.assignedRoleId ?? undefined,
					})

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
					result.push(Formatter.formatTask(createdTask))
				} catch (dbError) {
					console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î:', dbError)
					result.push(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.title}"\n`)
				}
			}
		return result.join('\n\n')
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
	private async processTaskOperations(operations: TaskOperation[]): Promise<string> {
		const response = []

		for (const operation of operations) {
			try {
				const task = await this.taskService.getTaskById(operation.taskId)
				if (!task) continue

				switch (operation.operation) {
					case 'delete':
						const deleteSuccess = await this.taskService.deleteTask(task.id)
						response.push(Formatter.formatTaskOperation(operation, deleteSuccess, task))

					case 'update':
						if (operation.updateData) {
							const updateData = {
								...operation.updateData,
								deadline: operation.updateData.deadline
									? new Date(operation.updateData.deadline)
									: undefined,
							}

							const updatedTask = await this.taskService.updateTask(task.id, updateData)
							response.push(Formatter.formatTaskOperation(operation, !!updatedTask, task))
						}
						break
				}
			} catch (operationError) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π:', operationError)
				response.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π #${operation.taskId}\n`)
			}
		}

		return response.join('\n')
	}

	private async processRoleOperations(
		operations: RoleOperation[],
		chatId: string,
	): Promise<string> {
		const response = []

		for (const operation of operations) {
			try {
				switch (operation.operation) {
					case 'create':
						if (operation.roleName) {
							let role: RoleEntity | undefined
							try {
								role = await this.roleService.createRole({
									name: operation.roleName,
									chatId: chatId,
								})
							} catch (error) {
								console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏:', error)
							}
							const success = !!role
							response.push(
								Formatter.formatRoleOperation(
									operation,
									success,
									role
								)
							)
						}
						break

					case 'delete':
						if (operation.roleId) {
							const role = await this.roleService.getRoleById(operation.roleId)
							const deleteSuccess = await this.roleService.deleteRole(operation.roleId)
							response.push(Formatter.formatRoleOperation(
								operation,
								deleteSuccess,
								role ?? undefined
							))
						}
						break

					case 'update':
						if (operation.roleId && operation.newRoleName) {
							const role = await this.roleService.getRoleById(operation.roleId)
							const updatedRole = await this.roleService.updateRole(operation.roleId, {
								name: operation.newRoleName,
							})
							response.push(Formatter.formatRoleOperation(
								operation,
								!!updatedRole,
								role ?? undefined
							))
						}
						break

					case 'assign':
						if (operation.targetUserId) {
							let roleId = operation.roleId
							if (!roleId && operation.roleName) {
								const roles = await this.roleService.getChatRoles(chatId)
								const role = roles.find(r => r.name === operation.roleName)
								roleId = role?.id
							}

							if (!roleId) break
							const role = await this.roleService.getRoleById(roleId)
							const success = await this.roleService.assignRoleToMember(
								chatId,
								operation.targetUserId,
								roleId
							)
							const targetUser = await this.userService.getUserById(operation.targetUserId)

							if (!targetUser) break
							response.push(Formatter.formatRoleOperation(
								{...operation, targetUser},
								success,
								role ?? undefined
							))
						}
						break

					case 'unassign':
						if (operation.targetUserId) {
							const role = await this.roleService.getRoleById(operation.roleId!)
							const success = await this.roleService.removeRoleFromMember(chatId, operation.targetUserId)
							const targetUser = await this.userService.getUserById(operation.targetUserId)
							if (!targetUser) break
							response.push(Formatter.formatRoleOperation(
								{...operation, targetUser},
								success,
								role ?? undefined
							))
						}
						break
				}
			} catch (operationError) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–æ–ª—å—é:', operationError)
				response.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–æ–ª—å—é "${operation.roleName ?? operation.roleId}"`)
			}
		}

		return response.join('\n')
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	private async processViewRequests(
		requests: ViewRequest[],
		chatId: string,
		userId: string,
		isGroup: boolean
	): Promise<string> {
		const response = []

		for (const request of requests) {
			try {
				switch (request.type) {
					case 'tasks':
						if (isGroup) {
							const tasks = await this.taskService.getGroupTasks(chatId)
							response.push(Formatter.formatTasksList(tasks))
						} else {
							const tasks = await this.taskService.getPersonalTasks(userId)
							response.push(Formatter.formatTasksList(tasks))
						}
						break

					case 'members':
						if (isGroup) {
							const chatMembers = await this.chatService.getChatMembers(chatId)
							response.push(Formatter.formatMembersList(chatMembers))
						} else {
							response.push('‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
						}
						break

					case 'roles':
						if (isGroup) {
							const roles = await this.roleService.getChatRoles(chatId)
							response.push(Formatter.formatRolesList(roles))
						} else {
							response.push('‚ùå –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
						}
						break

					case 'userTasks':
						if (isGroup) {
							const tasks = await this.taskService.getAssignedTasks(userId, chatId)
							response.push(Formatter.formatTasksList(tasks))
						} else {
							const tasks = await this.taskService.getPersonalTasks(userId)
							response.push(Formatter.formatTasksList(tasks))
						}
						break

					default:
						response.push(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: ${request.type}`)
				}
			} catch (error) {
				console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ ${request.type}:`, error)
				response.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ${request.type}`)
			}
		}

		return response.join('\n')
	}

	// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
	private cleanupFiles(oggPath: string, mp3Path: string): void {
		if (fs.existsSync(oggPath)) {
			fs.unlinkSync(oggPath)
		}
		if (fs.existsSync(mp3Path)) {
			fs.unlinkSync(mp3Path)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
	private handleVoiceError(bot: TelegramBot, chatId: string, error: any, oggPath: string, mp3Path: string): void {
		let errorMessage = 'Unknown error occurred'
		let isProxyError = false

		if (error instanceof Error) {
			errorMessage = error.message

			if (
				errorMessage.includes('timeout') ||
				errorMessage.includes('ECONNREFUSED') ||
				errorMessage.includes('ENOTFOUND') ||
				errorMessage.includes('proxy')
			) {
				isProxyError = true
				console.warn('Proxy-related error detected:', errorMessage)
			}
		}

		let userMessage = `Error processing voice message: ${errorMessage}`

		if (isProxyError) {
			userMessage +=
				'\n\nNote: There may be connectivity issues. The system will retry with direct connection if available.'
		}

		bot.sendMessage(chatId, userMessage)

		// –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
		try {
			this.cleanupFiles(oggPath, mp3Path)
		} catch (cleanupError) {
			console.warn('Error during cleanup:', cleanupError)
		}
	}
}
