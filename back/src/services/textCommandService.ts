import TelegramBot = require('node-telegram-bot-api')
import { TaskService } from './taskService'
import { ChatService } from './chatService'
import { MessageFormatterService } from './messageFormatterService'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
export class TextCommandService {
    private taskService: TaskService
    private chatService: ChatService

    constructor(taskService: TaskService, chatService: ChatService) {
        this.taskService = taskService
        this.chatService = chatService
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    async handleAddTask(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]')
            return
        }

        try {
            const taskTitle = match[1].trim()
            let task

            if (isGroup) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø–µ
                const member = await this.chatService.getMemberById(chatId, userId)
                if (!member) {
                    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ –∫–æ–º–∞–Ω–¥–æ–π /register')
                    return
                }

                const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
                task = await this.taskService.createGroupTask({
                    title: taskTitle,
                    description: taskTitle,
                    priority: 'medium',
                    deadline: null,
                    userId: userId,
                    chatId: chatId
                })
            } else {
                task = await this.taskService.createPersonalTask({
                    title: taskTitle,
                    description: taskTitle,
                    priority: 'medium',
                    deadline: null,
                    userId
                })
            }

            const taskId = MessageFormatterService.createTaskId(msg.chat.title || 'Chat', task.id)
            const response = MessageFormatterService.formatTaskCreation(
                task,
                taskId,
                msg.from!.first_name || msg.from!.username || 'Unknown'
            )
            
            bot.sendMessage(chatId, response)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    async handleAssignTask(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
            return
        }

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /assign [ID –∑–∞–¥–∞—á–∏] @[username]')
            return
        }

        try {
            const parts = match[1].trim().split(' ')
            if (parts.length < 2) {
                bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /assign [ID –∑–∞–¥–∞—á–∏] @[username]')
                return
            }

            const taskIdStr = parts[0]
            const username = parts[1].replace('@', '')

            // –ü–∞—Ä—Å–∏–º ID –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ABC-123
            const taskId = MessageFormatterService.parseTaskId(taskIdStr)
            if (!taskId) {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ ABC-123')
                return
            }

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É
            const task = await this.taskService.getGroupTaskById(taskId)
            if (!task || task.chatId !== chatId) {
                bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
                return
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const members = await this.chatService.getChatMembers(chatId)
            const assignee = members.find(member => member.username === username)

            if (!assignee) {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ`)
                return
            }

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const updatedTask = await this.taskService.updateGroupTask(taskId, { assignedToUserId: assignee.userId })
            const displayTaskId = MessageFormatterService.createTaskId(msg.chat.title || 'Chat', task.id)
            
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ ${displayTaskId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    async handleCompleteTask(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete [ID –∑–∞–¥–∞—á–∏]')
            return
        }

        try {
            const taskIdStr = match[1].trim()
            
            // –ü–∞—Ä—Å–∏–º ID –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ABC-123
            const taskId = MessageFormatterService.parseTaskId(taskIdStr)
            if (!taskId) {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ ABC-123')
                return
            }

            let task
            if (isGroup) {
                task = await this.taskService.getGroupTaskById(taskId)
                if (!task || task.chatId !== chatId) {
                    bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
                    return
                }
            } else {
                task = await this.taskService.getTaskById(taskId, userId)
                if (!task || task.userId !== userId) {
                    bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á')
                    return
                }
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            const updatedTask = isGroup ? 
                await this.taskService.updateGroupTask(taskId, { isCompleted: true }) :
                await this.taskService.updateTask(taskId, userId, { isCompleted: true })
            const displayTaskId = MessageFormatterService.createTaskId(msg.chat.title || 'Chat', task.id)
            
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ ${displayTaskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!`)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    async handleDeleteTask(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete [ID –∑–∞–¥–∞—á–∏]')
            return
        }

        try {
            const taskIdStr = match[1].trim()
            
            // –ü–∞—Ä—Å–∏–º ID –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ABC-123
            const taskId = MessageFormatterService.parseTaskId(taskIdStr)
            if (!taskId) {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ ABC-123')
                return
            }

            let task
            if (isGroup) {
                task = await this.taskService.getGroupTaskById(taskId)
                if (!task || task.chatId !== chatId) {
                    bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
                    return
                }
            } else {
                task = await this.taskService.getTaskById(taskId, userId)
                if (!task || task.userId !== userId) {
                    bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á')
                    return
                }
            }

            // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            const deleted = isGroup ? 
                await this.taskService.deleteGroupTask(taskId) :
                await this.taskService.deleteTask(taskId, userId)
            const displayTaskId = MessageFormatterService.createTaskId(msg.chat.title || 'Chat', task.id)
            
            if (deleted) {
                bot.sendMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ ${displayTaskId} —É–¥–∞–ª–µ–Ω–∞`)
            } else {
                bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ${displayTaskId}`)
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
        }
    }
}