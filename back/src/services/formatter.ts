import { UserEntity } from '../entities/User'
import { TaskEntity } from '../entities/Task'
import { RoleEntity } from '../entities/Role'
import { GeminiUser, GeminiRole, GeminiTask, GeminiChatMember } from '../types'

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
export class UserFormatter {
	/**
	 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
	 */
	static createTag(user: UserEntity | undefined): string {
		if (!user) {
			return MessageFormatter.ERRORS.NOT_FOUND
		}
		return `@${user.username || user.firstName || 'unknown'}`
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏
	 */
	static createDisplayName(user: UserEntity | undefined): string {
		if (!user) {
			return '‚ùì ' + MessageFormatter.ERRORS.NOT_FOUND
		}
		
		const name = `${user.firstName} ${user.lastName || ''}`.trim()
		const username = user.username ? ` (@${user.username})` : ''
		return name+username
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	 */
	static createShortInfo(user: UserEntity | undefined): string {
		if (!user) {
			return '‚ùì ' + MessageFormatter.VARIANTS.UNKNOWN
		}
		
		const name = `${user.firstName} ${user.lastName || ''}`.trim()
		const tag = this.createTag(user)
		return `${name} (${tag})`
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	 */
	static createFullInfo(user: UserEntity | undefined): string {
		if (!user) {
			return '‚ùì ' + MessageFormatter.ERRORS.NOT_FOUND
		}

		const result = []
		result.push(`<b>${user.firstName} ${user.lastName || ''}</b>`)
		
		if (user.username) {
			result.push(`üì± @${user.username}`)
		}
		
		result.push(`üÜî ID: ${user.telegramId}`)
		result.push(`üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.createdAt.toLocaleDateString('ru-RU')}`)
		
		return result.join('\n')
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
 */
export class TaskFormatter {
	/**
	 * –°–æ–∑–¥–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π ID –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
	 */
	static createTaskId(chatTitle: string, taskLocalId: number): string {
		const prefix = chatTitle.slice(0, 3).toUpperCase()
		return `${prefix}-${taskLocalId}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–¥–ª–∞–π–Ω–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–≤–æ–¥–æ–º
	 */
	static formatDeadline(deadline: Date): string {
		const deadlineDate = new Date(deadline)
		
		const dateStr = deadlineDate.toLocaleDateString('ru-RU', {
			day: '2-digit',
			month: '2-digit',
			year: 'numeric',
			hour: '2-digit',
			minute: '2-digit'
		})
		
		return dateStr
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
	 */
	static formatTask(task: TaskEntity): string {
		const result = []
		
		result.push(`<b>${task.readableId}: ${task.title}</b>`)
		
		// –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞)
		if (task.description && task.description.trim() !== task.title.trim()) {
			result.push(`<i>${task.description}</i>`)
		}
		
		// –î–µ–¥–ª–∞–π–Ω
		if (task.deadline) {
			const deadlineFormatted = this.formatDeadline(task.deadline)
			result.push(`‚è∞ ${deadlineFormatted}`)
		}
		
		// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º FYI
		if (task.type === 'group') {
			if (task.assignedUser) {
				result.push(`${UserFormatter.createTag(task.assignedUser)} FYI`)
			} else if (task.assignedRole) {
				result.push(`${task.assignedRole.name} FYI`)
			}
		}
				
		return result.join('\n')
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
 */
export class RoleFormatter {
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö
	 */
	static formatRole(role: RoleEntity): string {
		const memberCount = role.members?.length || 0
		const memberText = MessageFormatter.getMemberPlural(memberCount)
		
		return `üé≠ <b>${role.name}</b>\nüë• ${memberCount} ${memberText}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
	 */
	static formatRoleShort(role: RoleEntity): string {
		const memberCount = role.members?.length || 0
		return `üé≠ ${role.name} (${memberCount})`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
	 */
	static formatRoleDetailed(role: RoleEntity): string {
		const result = []
		result.push(`üé≠ <b>${role.name}</b>`)
		
		if (role.members && role.members.length > 0) {
			const memberText = MessageFormatter.getMemberPlural(role.members.length)
			result.push(`üë• ${memberText} (${role.members.length}):`)
			role.members.forEach((member, index) => {
				const userInfo = UserFormatter.createShortInfo(member.user)
				result.push(`  ${index + 1}. ${userInfo}`)
			})
		} else {
			result.push('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
		}
		
		result.push(`üìÖ –°–æ–∑–¥–∞–Ω–∞: ${role.createdAt.toLocaleDateString('ru-RU')}`)
		
		return result.join('\n')
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
	 */
	static formatNewRole(role: RoleEntity): string {
		return `‚ú® <b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å!</b>\nüé≠ ${role.name}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏
	 */
	static formatRenamedRole(oldName: string, newName: string): string {
		return `üîÑ <b>–†–æ–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞</b>\nüé≠ "${oldName}" ‚Üí "${newName}"`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	 */
	static formatRoleAssigned(role: RoleEntity, user: any): string {
		return `üë§ <b>–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\nüé≠ ${role.name}\nüë§ ${UserFormatter.createDisplayName(user)}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 */
	static formatRoleUnassigned(role: RoleEntity, user: any): string {
		return `üë§ <b>–†–æ–ª—å —Å–Ω—è—Ç–∞</b>\nüé≠ ${role.name}\nüë§ ${UserFormatter.createDisplayName(user)}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏
	 */
	static formatRoleDeleted(role: RoleEntity): string {
		return `üóëÔ∏è <b>–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞</b>\nüé≠ ${role.name}`
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏
 */
export class OperationFormatter {
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	 */
	static formatTaskCreated(task: TaskEntity): string {
		const result = []
		result.push(`‚ú® <b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>`)
		result.push(TaskFormatter.formatTask(task))
		return result.join('\n')
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	 */
	static formatTaskUpdated(task: TaskEntity): string {
		const result = []
		result.push(`üîÑ <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>`)
		result.push(TaskFormatter.formatTask(task))
		return result.join('\n')
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	 */
	static formatTaskDeleted(task: TaskEntity): string {
		return `üóëÔ∏è <b>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞</b>\nüìù ${task.readableId}: ${task.title}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
	 */
	static formatTaskCompleted(task: TaskEntity): string {
		return `‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\nüìù ${task.readableId}: ${task.title}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	 */
	static formatTaskAssignedToUser(task: TaskEntity, user: any): string {
		return `üë§ <b>–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\nüìù ${task.readableId}: ${task.title}\nüë§ ${UserFormatter.createDisplayName(user)}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Ä–æ–ª–∏
	 */
	static formatTaskAssignedToRole(task: TaskEntity, role: RoleEntity): string {
		return `üé≠ <b>–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª–∏</b>\nüìù ${task.readableId}: ${task.title}\nüé≠ ${role.name}`
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π
	 */
	static formatTaskOperation(operation: string, task: TaskEntity): string {
		switch (operation) {
			case 'delete':
				return this.formatTaskDeleted(task)
			case 'update':
				return this.formatTaskUpdated(task)
			case 'complete':
				return this.formatTaskCompleted(task)
			default:
				return `üîÑ <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\nüìù ${task.readableId}: ${task.title}`
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	 */
	static formatTaskUpdate(oldTask: TaskEntity, newTask: TaskEntity, updateData: any): string {
		const changes = []
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
		if (updateData.title && oldTask.title !== newTask.title) {
			changes.push(`üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> "${oldTask.title}" ‚Üí "${newTask.title}"`)
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
		if (updateData.description !== undefined) {
			if (oldTask.description !== newTask.description) {
				if (oldTask.description && newTask.description) {
					changes.push(`üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> "${oldTask.description}" ‚Üí "${newTask.description}"`)
				} else if (newTask.description) {
					changes.push(`üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ "${newTask.description}"`)
				} else if (oldTask.description) {
					changes.push(`üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> —É–¥–∞–ª–µ–Ω–æ "${oldTask.description}"`)
				}
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–µ–¥–ª–∞–π–Ω–µ
		if (updateData.deadline !== undefined) {
			const oldDeadline = oldTask.deadline ? TaskFormatter.formatDeadline(oldTask.deadline) : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
			const newDeadline = newTask.deadline ? TaskFormatter.formatDeadline(newTask.deadline) : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
			
			if (oldDeadline !== newDeadline) {
				changes.push(`‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> ${oldDeadline} ‚Üí ${newDeadline}`)
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if (updateData.assignedUserId !== undefined) {
			const oldUser = oldTask.assignedUser ? UserFormatter.createDisplayName(oldTask.assignedUser) : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
			const newUser = newTask.assignedUser ? UserFormatter.createDisplayName(newTask.assignedUser) : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
			
			if (oldUser !== newUser) {
				changes.push(`üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> ${oldUser} ‚Üí ${newUser}`)
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
		if (updateData.assignedRoleId !== undefined) {
			const oldRole = oldTask.assignedRole ? oldTask.assignedRole.name : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
			const newRole = newTask.assignedRole ? newTask.assignedRole.name : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'
			
			if (oldRole !== newRole) {
				changes.push(`üé≠ <b>–†–æ–ª—å:</b> ${oldRole} ‚Üí ${newRole}`)
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		if (updateData.isCompleted !== undefined && oldTask.isCompleted !== newTask.isCompleted) {
			const oldStatus = oldTask.isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
			const newStatus = newTask.isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
			changes.push(`‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> ${oldStatus} ‚Üí ${newStatus}`)
		}
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if (changes.length > 0) {
			return `üîÑ <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\nüìù ${newTask.readableId}: ${newTask.title}\n\n${changes.join('\n')}`
		} else {
			return `üîÑ <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\nüìù ${newTask.readableId}: ${newTask.title}`
		}
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
 */
export class ListFormatter {
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	 */
	static formatTasksList(tasks: TaskEntity[], title: string = 'üìã –ó–∞–¥–∞—á–∏'): string {
		if (tasks.length === 0) {
			return MessageFormatter.BOT_MESSAGES.NO_TASKS
		}

		const result = []
		result.push(`<b>${title}</b>`)
		result.push('')

		tasks.forEach((task, index) => {
			result.push(`${index + 1}. ${TaskFormatter.formatTask(task)}`)
			if (index < tasks.length - 1) result.push('')
		})

		return result.join('\n')
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	 */
	static formatRolesList(roles: RoleEntity[], title: string = 'üé≠ –†–æ–ª–∏'): string {
		if (roles.length === 0) {
			return `üé≠ –†–æ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç`
		}

		const result = []
		result.push(`<b>${title}</b>`)
		result.push('')

		roles.forEach((role, index) => {
			result.push(`${index + 1}. ${RoleFormatter.formatRole(role)}`)
			if (index < roles.length - 1) result.push('')
		})

		return result.join('\n')
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
	 */
	static formatChatMembersList(members: any[], title: string = 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞'): string {
		if (members.length === 0) {
			return `${title}\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç`
		}

		const result = []
		result.push(`<b>${title}</b>`)
		result.push('')

		members.forEach((member, index) => {
			const userInfo = UserFormatter.createShortInfo(member.user)
			const roleInfo = member.role ? ` (${member.role.name})` : ''
			result.push(`${index + 1}. ${userInfo}${roleInfo}`)
		})

		return result.join('\n')
	}
}

/**
 * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ Gemini AI
 */
export class PromptFormatter {
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ Gemini
	 */
	static formatUserForPrompt(user: UserEntity): GeminiUser {
		return {
			telegramId: user.telegramId,
			firstName: user.firstName,
			lastName: user.lastName || '',
			username: user.username || ''
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ Gemini
	 */
	static formatRoleForPrompt(role: RoleEntity): GeminiRole {
		return {
			id: role.id,
			name: role.name,
			chatId: role.chat.telegramId,
			memberIds: role.members?.map(member => member.user.telegramId) || []
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ Gemini
	 */
	static formatTaskForPrompt(task: TaskEntity): GeminiTask {
		return {
			id: task.id,
			readableId: task.readableId,
			title: task.title,
			description: task.description || undefined,
			deadline: task.deadline?.toISOString() || null,
			type: task.type,
			chatId: task.chat?.telegramId,
			assignedUserId: task.assignedUser?.telegramId || undefined,
			assignedRoleId: task.assignedRole?.id || undefined,
			isCompleted: task.isCompleted
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ Gemini
	 */
	static formatChatMemberForPrompt(member: any): GeminiChatMember {
		return {
			userId: member.user.telegramId,
			firstName: member.user.firstName,
			lastName: member.user.lastName || undefined,
			username: member.user.username || '',
			roleId: member.role?.id || undefined,
			roleName: member.role?.name || undefined
		}
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
	 */
	static formatPrompt(
		basePrompt: string,
		author: GeminiUser,
		roles: GeminiRole[],
		tasks: GeminiTask[],
		members: GeminiChatMember[]
	): string {
		const currentTime = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
		
		let prompt = basePrompt
			.replace('{currentTime}', currentTime)
			.replace('{author}', JSON.stringify(author, null, 2))
			.replace('{roles}', JSON.stringify(roles, null, 2))
			.replace('{tasks}', JSON.stringify(tasks, null, 2))
			.replace('{chatMembers}', JSON.stringify(members, null, 2))

		return prompt
	}
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export class MessageFormatter {
	// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
	static readonly BOT_MESSAGES = {
		SERVER_WORKING: 'üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
		WELCOME: (user: UserEntity) => `${user.firstName}, –≤—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Track-It!`,
		HELP: `ü§ñ <b>Track-It Bot</b> - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/roles - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–æ–ª–∏
/members - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
/check - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å/—Ç–µ–∫—Å—Ç)

<b>–°–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:</b>
üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –≥—Ä—É–ø–ø–∞—Ö - —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞)
üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –≥—Ä—É–ø–ø–∞—Ö - —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞)
üí¨ –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–æ –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É 1 –Ω–∞ –ü–µ—Ç—é"
‚Ä¢ "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É 2 –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
‚Ä¢ "check" - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
		UNKNOWN_COMMAND: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
		NO_TASKS: 'üìù –ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç',
		NO_ROLES: 'üé≠ –†–æ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç',
		NO_MEMBERS: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
		SYSTEM_MESSAGE: 'ü§ñ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
		VOICE_NOT_FOUND: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
		VOICE_INSTRUCTIONS: 'üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏',
		NATURAL_SPEECH: 'üó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω–æ',
		ADMIN_OK: '‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã',
		ADMIN_NEED: '‚ö†Ô∏è –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
		REGISTER_BUTTON: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
		PINNED: 'üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ',
		ADMIN_WELCOME_PINNED: 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ',
		ADMIN_THANKS: 'üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É!',
		ADMIN_FULL: 'üéâ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!'
	} as const

	static readonly ERRORS = {
		GENERAL: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
		NOT_FOUND: '‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω–æ',
		INVALID_INPUT: '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
		PERMISSION_DENIED: 'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
		BOT_NOT_INITIALIZED: 'ü§ñ –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
		UNAVAILABLE: 'üö´ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
	} as const

	static readonly VARIANTS = {
		UNKNOWN: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
		NOT_SPECIFIED: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
		NO_DEADLINE: '–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞'
	} as const

	static readonly SUCCESS = '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ "—É—á–∞—Å—Ç–Ω–∏–∫" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	 */
	static getMemberPlural(count: number): string {
		if (count === 1) return '—É—á–∞—Å—Ç–Ω–∏–∫'
		if (count >= 2 && count <= 4) return '—É—á–∞—Å—Ç–Ω–∏–∫–∞'
		return '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
	 */
	static formatTime(date: Date): string {
		return date.toLocaleString('ru-RU', {
			day: '2-digit',
			month: '2-digit',
			year: 'numeric',
			hour: '2-digit',
			minute: '2-digit'
		})
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
	 */
	static createHeader(emoji: string, text: string): string {
		return `${emoji} <b>${text}</b>`
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
	 */
	static createSeparator(): string {
		return '‚îÄ'.repeat(20)
	}
}
