import { AudioTranscriptionResponse, TaskOperation, RoleOperation } from './geminiService'

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
export class MessageFormatterService {
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ ID –∑–∞–¥–∞—á–∏
    static createTaskId(chatTitle: string, taskDbId: number): string {
        const prefix = chatTitle.slice(0, 3).toUpperCase()
        return `${prefix}-${taskDbId}`
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ ID –∑–∞–¥–∞—á–∏ –∏–∑ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    static parseTaskId(taskIdStr: string): number | null {
        const match = taskIdStr.match(/^[A-Z]{3}-(\d+)$/)
        return match ? parseInt(match[1]) : null
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–≥–æ–º
    static formatUserName(member: any): string {
        const name = member.firstName ? 
            `${member.firstName}${member.lastName ? ' ' + member.lastName : ''}` : 
            (member.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        const tag = member.username ? ` (@${member.username})` : ''
        return `${name}${tag}`
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    static createUserTag(username?: string): string {
        return username ? `@${username}` : ''
    }

    // –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    static translatePriority(priority: string): string {
        switch (priority) {
            case 'high': return '–í—ã—Å–æ–∫–∏–π'
            case 'medium': return '–°—Ä–µ–¥–Ω–∏–π'
            case 'low': return '–ù–∏–∑–∫–∏–π'
            default: return priority
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
    static formatRoleCreation(roleName: string, success: boolean, roleData?: any): string {
        if (success && roleData) {
            let result = `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${roleName}"\n\n`
            result += `üé≠ –ù–∞–∑–≤–∞–Ω–∏–µ: ${roleData.name}\n`
            result += `üè¢ –ß–∞—Ç: ${roleData.chatId}\n`
            result += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
            result += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${roleData.membersCount || 0}\n`
            
            if (roleData.description) {
                result += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${roleData.description}\n`
            }
            
            return result
        } else if (success) {
            return `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${roleName}"`
        } else {
            return `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ "${roleName}"`
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    static formatTaskCreation(
        task: any, 
        taskId: string, 
        userName: string,
        assignedUserName?: string, 
        assignedUserTag?: string
    ): string {
        let result = `‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ${taskId}\n\n`
        result += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.title}\n`
        result += `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`
        result += `üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(task.priority)}\n`
        result += `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${userName}\n`
        result += `üìä –¢–∏–ø: ${task.type === 'group' ? '–ì—Ä—É–ø–ø–æ–≤–∞—è' : '–õ–∏—á–Ω–∞—è'}\n`
        result += `ÔøΩ –°–æ–∑–¥–∞–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
        result += `‚ú® –°—Ç–∞—Ç—É—Å: ${task.isCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}\n`
        
        if (task.deadline) {
            result += `‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${task.deadline}\n`
        }
        
        if (assignedUserName) {
            result += `ÔøΩ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞: ${assignedUserName} ${assignedUserTag || ''}\n`
        } else if (task.assignedToUserId) {
            result += `üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞: ID ${task.assignedToUserId}\n`
        } else if (task.assignedToRoleId) {
            result += `üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Ä–æ–ª—å: ID ${task.assignedToRoleId}\n`
        } else {
            result += `üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n`
        }
        
        if (task.chatId) {
            result += `üí¨ –ß–∞—Ç: ${task.chatId}\n`
        }
        
        return result
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π
    static formatTaskOperation(operation: TaskOperation, success: boolean, chatTitle: string, taskData?: any): string {
        const taskReadableId = this.createTaskId(chatTitle, parseInt(operation.taskId))
        
        switch (operation.operation) {
            case 'delete':
                return success ? 
                    `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ${taskReadableId}` : 
                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ${taskReadableId}`
            
            case 'complete':
                if (success && taskData) {
                    let result = `‚úÖ –ó–∞–¥–∞—á–∞ ${taskReadableId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è\n\n`
                    result += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskData.title}\n`
                    result += `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.description}\n`
                    result += `üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(taskData.priority)}\n`
                    result += `‚ú® –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–∞\n`
                    result += `üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
                    return result
                } else {
                    return success ? 
                        `‚úÖ –ó–∞–¥–∞—á–∞ ${taskReadableId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è` : 
                        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É ${taskReadableId} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`
                }
            
            case 'update':
                if (success) {
                    let result = `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ${taskReadableId}\n\n`
                    
                    if (taskData) {
                        result += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskData.title}\n`
                        result += `üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${taskData.description}\n`
                        result += `üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(taskData.priority)}\n`
                        result += `‚ú® –°—Ç–∞—Ç—É—Å: ${taskData.isCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}\n`
                        result += `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
                        
                        if (taskData.deadline) {
                            result += `‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${taskData.deadline}\n`
                        }
                        
                        if (taskData.assignedToUserId) {
                            result += `üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞: ID ${taskData.assignedToUserId}\n`
                        } else if (taskData.assignedToRoleId) {
                            result += `üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Ä–æ–ª—å: ID ${taskData.assignedToRoleId}\n`
                        }
                    }
                    
                    if (operation.updateData) {
                        const changes = []
                        if (operation.updateData.title) changes.push(`–Ω–∞–∑–≤–∞–Ω–∏–µ: "${operation.updateData.title}"`)
                        if (operation.updateData.description) changes.push(`–æ–ø–∏—Å–∞–Ω–∏–µ: "${operation.updateData.description}"`)
                        if (operation.updateData.priority) changes.push(`–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.translatePriority(operation.updateData.priority)}`)
                        if (operation.updateData.deadline) changes.push(`—Å—Ä–æ–∫: ${operation.updateData.deadline}`)
                        if (operation.updateData.assignedToUser) changes.push(`–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${operation.updateData.assignedToUser}`)
                        if (operation.updateData.assignedToRole) changes.push(`—Ä–æ–ª—å: ${operation.updateData.assignedToRole}`)
                        if (operation.updateData.isCompleted !== undefined) {
                            changes.push(`—Å—Ç–∞—Ç—É—Å: ${operation.updateData.isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–∞–∫—Ç–∏–≤–Ω–∞'}`)
                        }
                        
                        if (changes.length > 0) {
                            result += `\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${changes.join(', ')}`
                        }
                    }
                    return result
                } else {
                    return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É ${taskReadableId}`
                }
            
            default:
                return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∑–∞–¥–∞—á–µ–π ${taskReadableId}`
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–æ–ª—å—é
    static formatRoleOperation(operation: RoleOperation, success: boolean, roleData?: any): string {
        switch (operation.operation) {
            case 'create':
                if (success && roleData) {
                    let result = `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${operation.roleName}"\n\n`
                    result += `üé≠ –ù–∞–∑–≤–∞–Ω–∏–µ: ${roleData.name}\n`
                    result += `üè¢ –ß–∞—Ç: ${roleData.chatId}\n`
                    result += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
                    result += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${roleData.membersCount || 0}\n`
                    return result
                } else {
                    return success ? 
                        `‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${operation.roleName}"` : 
                        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å "${operation.roleName}"`
                }
            
            case 'delete':
                return success ? 
                    `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å "${operation.roleName}"` : 
                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å "${operation.roleName}"`
            
            case 'update':
                if (success && roleData) {
                    let result = `üîÑ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n`
                    result += `üé≠ –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${operation.roleName}"\n`
                    result += `üé≠ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${operation.newRoleName}"\n`
                    result += `üè¢ –ß–∞—Ç: ${roleData.chatId}\n`
                    result += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${roleData.membersCount || 0}\n`
                    result += `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
                    return result
                } else {
                    return success ? 
                        `üîÑ –†–æ–ª—å "${operation.roleName}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ "${operation.newRoleName}"` : 
                        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–æ–ª—å "${operation.roleName}"`
                }
            
            case 'assign':
                if (success && roleData) {
                    let result = `üë§ –†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n`
                    result += `üé≠ –†–æ–ª—å: "${operation.roleName}"\n`
                    result += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${operation.targetUser}\n`
                    result += `üè¢ –ß–∞—Ç: ${roleData.chatId}\n`
                    result += `üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}\n`
                    return result
                } else {
                    return success ? 
                        `üë§ –†–æ–ª—å "${operation.roleName}" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${operation.targetUser}` : 
                        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å "${operation.roleName}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${operation.targetUser}`
                }
            
            case 'unassign':
                return success ? 
                    `üë§ –†–æ–ª—å "${operation.roleName}" —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${operation.targetUser}` : 
                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª—å "${operation.roleName}" —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${operation.targetUser}`
            
            default:
                return `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å —Ä–æ–ª—å—é "${operation.roleName}"`
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    static formatMembersList(members: any[]): string {
        if (members.length === 0) {
            return 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
        }

        let response = 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n'
        members.forEach((member, index) => {
            const memberName = this.formatUserName(member)
            const roleName = member.role?.name ? ` [${member.role.name}]` : ''
            response += `\n${index + 1}. ${memberName}${roleName}`
        })
        return response
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
    static formatRolesList(roles: any[]): string {
        if (roles.length === 0) {
            return 'üé≠ –†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
        }

        let response = 'üé≠ –†–æ–ª–∏ –≤ –≥—Ä—É–ø–ø–µ:\n'
        roles.forEach((role, index) => {
            response += `\n${index + 1}. ${role.name} (${role.membersCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`
            if (role.members.length > 0) {
                response += `\n   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${role.members.join(', ')}`
            }
        })
        return response
    }

    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
    static formatGeminiResponse(
        geminiResponse: AudioTranscriptionResponse,
        createdRoles: { [name: string]: number },
        chatTitle: string,
        members: any[]
    ): { response: string, hasChanges: boolean } {
        let formattedResponse = ''
        let hasChanges = false

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
        if (geminiResponse.roles && geminiResponse.roles.length > 0) {
            geminiResponse.roles.forEach(roleData => {
                const success = createdRoles[roleData.name] !== undefined
                formattedResponse += this.formatRoleCreation(roleData.name, success, roleData) + '\n'
                if (success) hasChanges = true
            })
            if (geminiResponse.roles.length > 0) formattedResponse += '\n'
        }

        return { response: formattedResponse, hasChanges }
    }
}