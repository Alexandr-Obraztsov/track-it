import TelegramBot = require('node-telegram-bot-api')
import { TaskService } from './taskService'
import { ChatService } from './chatService'
import { UserService } from './userService'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query
export class CallbackHandlerService {
	private taskService: TaskService
	private chatService: ChatService
	private userService: UserService

	constructor(taskService: TaskService, chatService: ChatService, userService: UserService) {
		this.taskService = taskService
		this.chatService = chatService
		this.userService = userService
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
	async handleCallbackQuery(bot: TelegramBot, callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
		const data = callbackQuery.data
		const msg = callbackQuery.message
		const user = callbackQuery.from

		if (!data || !msg) return

		try {
			if (data === 'register') {
				await this.handleRegisterCallback(bot, callbackQuery, msg, user)
			}

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
			bot.answerCallbackQuery(callbackQuery.id)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error)
			bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' })
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)
	private async handleRegisterCallback(
		bot: TelegramBot,
		callbackQuery: TelegramBot.CallbackQuery,
		msg: TelegramBot.Message,
		user: TelegramBot.User
	): Promise<void> {
		const chatId = msg.chat.id.toString()
		const userId = user.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup) {
			bot.answerCallbackQuery(callbackQuery.id, {
				text: '–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
			})
			return
		}

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			const existingMember = await this.chatService.isMember(chatId, userId)
			if (existingMember) {
				bot.answerCallbackQuery(callbackQuery.id, {
					text: `‚úÖ ${user.first_name || user.username}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\nüéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.`,
					show_alert: true,
				})
				return
			}

			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const member = await this.userService.createOrGetUser({
				telegramId: userId,
				username: user.username || '',
				firstName: user.first_name || '',
				lastName: user.last_name || '',
			})

			await this.chatService.addMember(chatId, userId)

			bot.answerCallbackQuery(callbackQuery.id, {
				text: `‚úÖ ${member.firstName || member.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`,
				show_alert: true,
			})
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ callback:', error)
			bot.answerCallbackQuery(callbackQuery.id, {
				text: '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç',
				show_alert: true,
			})
		}
	}
}
