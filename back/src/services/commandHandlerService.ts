import TelegramBot = require('node-telegram-bot-api')
import { TaskService } from './taskService'
import { ChatService } from './chatService'
import { RoleService } from './roleService'
import { MessageFormatterService } from './messageFormatterService'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
export class CommandHandlerService {
    private taskService: TaskService
    private chatService: ChatService
    private roleService: RoleService

    constructor(taskService: TaskService, chatService: ChatService, roleService: RoleService) {
        this.taskService = taskService
        this.chatService = chatService
        this.roleService = roleService
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    async handleStart(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (isGroup) {
            const welcomeText = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n\n' +
                'üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è:\n' +
                '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n' +
                '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n' +
                '‚Ä¢ –†–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' +
                '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n' +
                '‚ÑπÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n' +
                'ü§ñ –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ò–ò!'
            
            bot.sendMessage(chatId, welcomeText)
        } else {
            bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\nüéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò!')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    async handleHelp(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (isGroup) {
            const helpText = 'ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n' +
                'üéôÔ∏è –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–º:\n\n' +
                'üìù –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß:\n' +
                '‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"\n' +
                '‚Ä¢ "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞ –ü–µ—Ç—é - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"\n' +
                '‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞, –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"\n\n' +
                'üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò:\n' +
                '‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏"\n' +
                '‚Ä¢ "–£–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –Ω–æ–º–µ—Ä 3"\n' +
                '‚Ä¢ "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É 5 –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"\n' +
                '‚Ä¢ "–ù–∞–∑–Ω–∞—á—å –∑–∞–¥–∞—á—É 2 –Ω–∞ –ú–∞—à—É"\n\n' +
                'üë• –†–ê–ë–û–¢–ê –° –†–û–õ–Ø–ú–ò:\n' +
                '‚Ä¢ "–°–æ–∑–¥–∞–π —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"\n' +
                '‚Ä¢ "–ù–∞–∑–Ω–∞—á—å –ò–≤–∞–Ω—É —Ä–æ–ª—å –∞–¥–º–∏–Ω"\n' +
                '‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"\n' +
                '‚Ä¢ "–ö–∞–∫–∏–µ —Ä–æ–ª–∏ –µ—Å—Ç—å?"\n\n' +
                '‚ú® –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - –ò–ò –ø–æ–π–º–µ—Ç –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã!'
            
            bot.sendMessage(chatId, helpText)
        } else {
            bot.sendMessage(chatId, 'ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n\nüéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò!\n\n–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n‚Ä¢ "–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"\n‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏"\n‚Ä¢ "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É 1 –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /register (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è)
    async handleRegister(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '‚ÑπÔ∏è –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!')
            return
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
            await this.chatService.getOrCreateChat(
                chatId,
                msg.chat.title || 'Unknown Group',
                msg.chat.username
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingMember = await this.chatService.getMemberById(chatId, userId)
            if (existingMember) {
                bot.sendMessage(chatId, `‚úÖ ${msg.from!.first_name || msg.from!.username}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!`)
                return
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const member = await this.chatService.registerMember(
                chatId,
                userId,
                msg.from!.username || '',
                msg.from!.first_name || '',
                msg.from!.last_name || ''
            )

            bot.sendMessage(chatId, `‚úÖ ${member.firstName || member.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n‚ÑπÔ∏è –í –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /members
    async handleMembers(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ /members –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
            return
        }

        try {
            const members = await this.chatService.getChatMembers(chatId)
            
            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—è–º–∏
            const memberDetails = []
            for (const member of members) {
                const memberWithRole = await this.chatService.getMemberWithRole(chatId, member.userId)
                memberDetails.push(memberWithRole)
            }
            
            const response = MessageFormatterService.formatMembersList(memberDetails)
            bot.sendMessage(chatId, response)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /roles
    async handleRoles(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
            return
        }

        try {
            const roles = await this.chatService.getChatRolesWithMembers(chatId)
            const response = MessageFormatterService.formatRolesList(roles)
            bot.sendMessage(chatId, response)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tasks
    async handleTasks(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        try {
            let tasks
            if (isGroup) {
                const chat = await this.chatService.getOrCreateChat(chatId, msg.chat.title || 'Unknown Group', msg.chat.username)
                tasks = await this.taskService.getTasksByChat(chatId)
            } else {
                tasks = await this.taskService.getPersonalTasks(userId)
            }

            if (tasks.length === 0) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á')
            } else {
                let response = isGroup ? '–ó–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã:\n' : '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n'
                tasks.forEach((task, index) => {
                    const taskId = MessageFormatterService.createTaskId(msg.chat.title || 'Chat', task.id)
                    response += `\n${index + 1}. ${taskId}: ${task.title}\n`
                    response += `   üìã ${task.description}\n`
                    response += `   üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${MessageFormatterService.translatePriority(task.priority)}\n`
                    response += `   ‚úÖ –°—Ç–∞—Ç—É—Å: ${task.isCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}\n`
                    if (task.deadline) {
                        response += `   üìÖ –°—Ä–æ–∫: ${new Date(task.deadline).toLocaleDateString('ru-RU')}\n`
                    }
                })
                bot.sendMessage(chatId, response)
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pin_welcome
    async handlePinWelcome(bot: TelegramBot, msg: any): Promise<void> {
        const chatId = msg.chat.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
            return
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const member = await bot.getChatMember(chatId, msg.from!.id)
            if (member.status !== 'administrator' && member.status !== 'creator') {
                bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã')
                return
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const welcomeMessage = 'üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö!\n\n' +
                '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n' +
                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:'

            const registerKeyboard = {
                inline_keyboard: [
                    [{ text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data: 'register' }]
                ]
            }

            const sentMessage = await bot.sendMessage(chatId, welcomeMessage, {
                reply_markup: registerKeyboard
            })

            // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.pinChatMessage(chatId, sentMessage.message_id)
            bot.sendMessage(chatId, '‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!')

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏
    async handleRoleAssign(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
            return
        }

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /role_assign @username —Ä–æ–ª—å')
            return
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentMember = await this.chatService.getMemberWithRole(chatId, userId)
            if (!currentMember?.role || !['admin', 'moderator'].includes(currentMember.role.name)) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π')
                return
            }

            const parts = match[1].trim().split(' ')
            if (parts.length < 2) {
                bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /role_assign @username —Ä–æ–ª—å')
                return
            }

            const username = parts[0].replace('@', '')
            const roleName = parts.slice(1).join(' ')

            // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const members = await this.chatService.getChatMembers(chatId)
            const targetMember = members.find(member => member.username === username)

            if (!targetMember) {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ`)
                return
            }

            // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–ª—å
            const role = await this.roleService.getRoleByName(chatId, roleName)
            if (!role) {
                bot.sendMessage(chatId, `–†–æ–ª—å "${roleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
                return
            }

            // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
            const success = await this.chatService.assignRoleToUser(chatId, targetMember.userId, role.id)
            if (success) {
                bot.sendMessage(chatId, `‚úÖ –†–æ–ª—å "${roleName}" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`)
            } else {
                bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å "${roleName}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`)
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏')
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
    async handleRoleRemove(bot: TelegramBot, msg: any, match: RegExpExecArray | null): Promise<void> {
        const chatId = msg.chat.id.toString()
        const userId = msg.from!.id.toString()
        const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

        if (!isGroup) {
            bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö')
            return
        }

        if (!match || !match[1]) {
            bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /role_remove @username')
            return
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentMember = await this.chatService.getMemberWithRole(chatId, userId)
            if (!currentMember?.role || !['admin', 'moderator'].includes(currentMember.role.name)) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π')
                return
            }

            const username = match[1].trim().replace('@', '')

            // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const members = await this.chatService.getChatMembers(chatId)
            const targetMember = members.find(member => member.username === username)

            if (!targetMember) {
                bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ`)
                return
            }

            // –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å
            const success = await this.chatService.removeRoleFromUser(chatId, targetMember.userId)
            if (success) {
                bot.sendMessage(chatId, `‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`)
            } else {
                bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`)
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏:', error)
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏')
        }
    }
}