import TelegramBot = require('node-telegram-bot-api')
import { MessageFormatter, ListFormatter } from './formatter'
import { TaskService } from './taskService'
import { ChatService } from './chatService'
import { RoleService } from './roleService'
import { UserService } from './userService'

// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
export class CommandHandlerService {
	private taskService: TaskService
	private chatService: ChatService
	private roleService: RoleService
	private userService: UserService

	constructor(taskService: TaskService, chatService: ChatService, roleService: RoleService, userService: UserService) {
		this.taskService = taskService
		this.chatService = chatService
		this.roleService = roleService
		this.userService = userService
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
	async handleStart(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup) {
			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
			const keyboard = {
				keyboard: [
					[
						{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏' },
					]
				],
				resize_keyboard: true,
				one_time_keyboard: false
			}

			bot.sendMessage(
				chatId,
				MessageFormatter.BOT_MESSAGES.WELCOME + '\n\nüéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:',
				{ reply_markup: keyboard }
			)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tasks
	async handleTasks(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const userId = msg.from!.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		try {
			let tasks
			if (isGroup) {
				tasks = await this.taskService.getGroupTasks(chatId)
			} else {
				tasks = await this.taskService.getPersonalTasks(userId)
			}

			const response = ListFormatter.formatTasksList(tasks)
			bot.sendMessage(chatId, response, { parse_mode: 'HTML' })
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', error)
			bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /members
	async handleMembers(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup) {
			bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
			return
		}

		try {
			const members = await this.chatService.getChatMembers(chatId)
			const response = ListFormatter.formatChatMembersList(members)
			bot.sendMessage(chatId, response, { parse_mode: 'HTML' })
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error)
			bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /roles
	async handleRoles(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		if (!isGroup) {
			bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö')
			return
		}

		try {
			const roles = await this.roleService.getChatRoles(chatId)
			const response = ListFormatter.formatRolesList(roles)
			bot.sendMessage(chatId, response, { parse_mode: 'HTML' })
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π:', error)
			bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mytasks
	async handleMyTasks(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const userId = msg.from!.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'

		try {
			let tasks
			if (isGroup) {
				tasks = await this.taskService.getAssignedTasks(userId, chatId)
			} else {
				tasks = await this.taskService.getPersonalTasks(userId)
			}

			const response = ListFormatter.formatTasksList(tasks)
			bot.sendMessage(chatId, response, { parse_mode: 'HTML' })
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:', error)
			bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	async handleKeyboardButton(bot: TelegramBot, msg: TelegramBot.Message): Promise<void> {
		const chatId = msg.chat.id.toString()
		const userId = msg.from!.id.toString()
		const isGroup = msg.chat.type === 'group' || msg.chat.type === 'supergroup'
		const buttonText = msg.text

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
		if (isGroup) return

		try {
			switch (buttonText) {
				case 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏':
					await this.handleMyTasks(bot, msg)
					break
				default:
					// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
					break
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error)
			bot.sendMessage(chatId, MessageFormatter.ERRORS.GENERAL)
		}
	}
}
