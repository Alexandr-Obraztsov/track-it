"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
require("reflect-metadata");
const typeorm_1 = require("typeorm");
const Task_1 = require("./src/entities/Task");
const Chat_1 = require("./src/entities/Chat");
const ChatMember_1 = require("./src/entities/ChatMember");
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseSchema() {
    const dataSource = new typeorm_1.DataSource({
        type: 'postgres',
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '5432'),
        username: process.env.DB_USER || 'user',
        password: process.env.DB_PASSWORD || 'password',
        database: process.env.DB_NAME || 'trackit',
        entities: [Task_1.TaskEntity, Chat_1.ChatEntity, ChatMember_1.ChatMemberEntity],
        synchronize: false, // –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    });
    try {
        await dataSource.initialize();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        const queryRunner = dataSource.createQueryRunner();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É chat_members
        const chatMembersTable = await queryRunner.getTable('chat_members');
        if (chatMembersTable) {
            console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chat_members:');
            chatMembersTable.columns.forEach(column => {
                console.log(`  ${column.name}: ${column.type} (${column.isNullable ? 'nullable' : 'not null'})`);
            });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É chats
        const chatsTable = await queryRunner.getTable('chats');
        if (chatsTable) {
            console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã chats:');
            chatsTable.columns.forEach(column => {
                console.log(`  ${column.name}: ${column.type} (${column.isNullable ? 'nullable' : 'not null'})`);
            });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tasks
        const tasksTable = await queryRunner.getTable('tasks');
        if (tasksTable) {
            console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks:');
            tasksTable.columns.forEach(column => {
                console.log(`  ${column.name}: ${column.type} (${column.isNullable ? 'nullable' : 'not null'})`);
            });
        }
        await queryRunner.release();
        await dataSource.destroy();
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}
checkDatabaseSchema();
//# sourceMappingURL=check-db.js.map